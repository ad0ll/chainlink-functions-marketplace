/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsBillingRegistryInterface {
  export type RequestBillingStruct = {
    subscriptionId: BigNumberish;
    client: AddressLike;
    gasLimit: BigNumberish;
    gasPrice: BigNumberish;
  };

  export type RequestBillingStructOutput = [
    subscriptionId: bigint,
    client: string,
    gasLimit: bigint,
    gasPrice: bigint
  ] & {
    subscriptionId: bigint;
    client: string;
    gasLimit: bigint;
    gasPrice: bigint;
  };
}

export interface MockBillingRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_FEE"
      | "MAX_CONSUMERS"
      | "addConsumer"
      | "createSubscription"
      | "forceBalance"
      | "fulfillAndBill"
      | "getSubscription"
      | "setFunctionsManager"
      | "startBilling"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FulfillAndBillLog"
      | "SubscriptionCanceled"
      | "SubscriptionConsumerAdded"
      | "SubscriptionConsumerRemoved"
      | "SubscriptionCreated"
      | "SubscriptionFunded"
      | "SubscriptionOwnerTransferRequested"
      | "SubscriptionOwnerTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BASE_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_CONSUMERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAndBill",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunctionsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startBilling",
    values: [BytesLike, FunctionsBillingRegistryInterface.RequestBillingStruct]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONSUMERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAndBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFunctionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBilling",
    data: BytesLike
  ): Result;
}

export namespace FulfillAndBillLogEvent {
  export type InputTuple = [
    requestId: BytesLike,
    subscriptionId: BigNumberish,
    res: BytesLike,
    err: BytesLike,
    success: boolean
  ];
  export type OutputTuple = [
    requestId: string,
    subscriptionId: bigint,
    res: string,
    err: string,
    success: boolean
  ];
  export interface OutputObject {
    requestId: string;
    subscriptionId: bigint;
    res: string;
    err: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCanceledEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    subscriptionId: bigint,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    subscriptionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerAddedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    consumer: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, consumer: string];
  export interface OutputObject {
    subscriptionId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerRemovedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    consumer: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, consumer: string];
  export interface OutputObject {
    subscriptionId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [subscriptionId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [subscriptionId: bigint, owner: string];
  export interface OutputObject {
    subscriptionId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    oldBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    subscriptionId: bigint,
    oldBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    subscriptionId: bigint;
    oldBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferRequestedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, from: string, to: string];
  export interface OutputObject {
    subscriptionId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferredEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, from: string, to: string];
  export interface OutputObject {
    subscriptionId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockBillingRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: MockBillingRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_CONSUMERS: TypedContractMethod<[], [bigint], "view">;

  addConsumer: TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  forceBalance: TypedContractMethod<
    [subscriptionId: BigNumberish, balance: BigNumberish],
    [void],
    "nonpayable"
  >;

  fulfillAndBill: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [
      [bigint, string, string[]] & {
        balance: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;

  setFunctionsManager: TypedContractMethod<
    [_functionsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  startBilling: TypedContractMethod<
    [
      data: BytesLike,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CONSUMERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "forceBalance"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, balance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillAndBill"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish],
    [
      [bigint, string, string[]] & {
        balance: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setFunctionsManager"
  ): TypedContractMethod<
    [_functionsManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startBilling"
  ): TypedContractMethod<
    [
      data: BytesLike,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "FulfillAndBillLog"
  ): TypedContractEvent<
    FulfillAndBillLogEvent.InputTuple,
    FulfillAndBillLogEvent.OutputTuple,
    FulfillAndBillLogEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCanceled"
  ): TypedContractEvent<
    SubscriptionCanceledEvent.InputTuple,
    SubscriptionCanceledEvent.OutputTuple,
    SubscriptionCanceledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerAdded"
  ): TypedContractEvent<
    SubscriptionConsumerAddedEvent.InputTuple,
    SubscriptionConsumerAddedEvent.OutputTuple,
    SubscriptionConsumerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerRemoved"
  ): TypedContractEvent<
    SubscriptionConsumerRemovedEvent.InputTuple,
    SubscriptionConsumerRemovedEvent.OutputTuple,
    SubscriptionConsumerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFunded"
  ): TypedContractEvent<
    SubscriptionFundedEvent.InputTuple,
    SubscriptionFundedEvent.OutputTuple,
    SubscriptionFundedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferRequested"
  ): TypedContractEvent<
    SubscriptionOwnerTransferRequestedEvent.InputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferred"
  ): TypedContractEvent<
    SubscriptionOwnerTransferredEvent.InputTuple,
    SubscriptionOwnerTransferredEvent.OutputTuple,
    SubscriptionOwnerTransferredEvent.OutputObject
  >;

  filters: {
    "FulfillAndBillLog(bytes32,uint64,bytes,bytes,bool)": TypedContractEvent<
      FulfillAndBillLogEvent.InputTuple,
      FulfillAndBillLogEvent.OutputTuple,
      FulfillAndBillLogEvent.OutputObject
    >;
    FulfillAndBillLog: TypedContractEvent<
      FulfillAndBillLogEvent.InputTuple,
      FulfillAndBillLogEvent.OutputTuple,
      FulfillAndBillLogEvent.OutputObject
    >;

    "SubscriptionCanceled(uint64,address,uint256)": TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;
    SubscriptionCanceled: TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;

    "SubscriptionConsumerAdded(uint64,address)": TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;
    SubscriptionConsumerAdded: TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;

    "SubscriptionConsumerRemoved(uint64,address)": TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;
    SubscriptionConsumerRemoved: TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;

    "SubscriptionCreated(uint64,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionFunded(uint64,uint256,uint256)": TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;
    SubscriptionFunded: TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;

    "SubscriptionOwnerTransferRequested(uint64,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;
    SubscriptionOwnerTransferRequested: TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;

    "SubscriptionOwnerTransferred(uint64,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
    SubscriptionOwnerTransferred: TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
  };
}
