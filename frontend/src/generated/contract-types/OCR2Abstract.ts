/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OCR2AbstractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "latestConfigDetails"
      | "latestConfigDigestAndEpoch"
      | "setConfig"
      | "transmit"
      | "typeAndVersion"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ConfigSet" | "Transmitted"): EventFragment;

  encodeFunctionData(
    functionFragment: "latestConfigDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDigestAndEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      AddressLike[],
      AddressLike[],
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transmit",
    values: [
      [BytesLike, BytesLike, BytesLike],
      BytesLike,
      BytesLike[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "latestConfigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDigestAndEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    previousConfigBlockNumber: BigNumberish,
    configDigest: BytesLike,
    configCount: BigNumberish,
    signers: AddressLike[],
    transmitters: AddressLike[],
    f: BigNumberish,
    onchainConfig: BytesLike,
    offchainConfigVersion: BigNumberish,
    offchainConfig: BytesLike
  ];
  export type OutputTuple = [
    previousConfigBlockNumber: bigint,
    configDigest: string,
    configCount: bigint,
    signers: string[],
    transmitters: string[],
    f: bigint,
    onchainConfig: string,
    offchainConfigVersion: bigint,
    offchainConfig: string
  ];
  export interface OutputObject {
    previousConfigBlockNumber: bigint;
    configDigest: string;
    configCount: bigint;
    signers: string[];
    transmitters: string[];
    f: bigint;
    onchainConfig: string;
    offchainConfigVersion: bigint;
    offchainConfig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransmittedEvent {
  export type InputTuple = [configDigest: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [configDigest: string, epoch: bigint];
  export interface OutputObject {
    configDigest: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OCR2Abstract extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: OCR2AbstractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  latestConfigDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;

  latestConfigDigestAndEpoch: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: bigint;
      }
    ],
    "view"
  >;

  setConfig: TypedContractMethod<
    [
      signers: AddressLike[],
      transmitters: AddressLike[],
      f: BigNumberish,
      onchainConfig: BytesLike,
      offchainConfigVersion: BigNumberish,
      offchainConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transmit: TypedContractMethod<
    [
      reportContext: [BytesLike, BytesLike, BytesLike],
      report: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      rawVs: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "latestConfigDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestConfigDigestAndEpoch"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      signers: AddressLike[],
      transmitters: AddressLike[],
      f: BigNumberish,
      onchainConfig: BytesLike,
      offchainConfigVersion: BigNumberish,
      offchainConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transmit"
  ): TypedContractMethod<
    [
      reportContext: [BytesLike, BytesLike, BytesLike],
      report: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      rawVs: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "Transmitted"
  ): TypedContractEvent<
    TransmittedEvent.InputTuple,
    TransmittedEvent.OutputTuple,
    TransmittedEvent.OutputObject
  >;

  filters: {
    "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "Transmitted(bytes32,uint32)": TypedContractEvent<
      TransmittedEvent.InputTuple,
      TransmittedEvent.OutputTuple,
      TransmittedEvent.OutputObject
    >;
    Transmitted: TypedContractEvent<
      TransmittedEvent.InputTuple,
      TransmittedEvent.OutputTuple,
      TransmittedEvent.OutputObject
    >;
  };
}
