/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsBillingRegistryInterface {
  export type RequestBillingStruct = {
    subscriptionId: BigNumberish;
    client: AddressLike;
    gasLimit: BigNumberish;
    gasPrice: BigNumberish;
  };

  export type RequestBillingStructOutput = [
    subscriptionId: bigint,
    client: string,
    gasLimit: bigint,
    gasPrice: bigint
  ] & {
    subscriptionId: bigint;
    client: string;
    gasLimit: bigint;
    gasPrice: bigint;
  };
}

export interface MockFunctionsOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_FEE"
      | "deleteNodePublicKey"
      | "estimateCost"
      | "getAllNodePublicKeys"
      | "getDONPublicKey"
      | "getRegistry"
      | "getRequiredFee"
      | "registry"
      | "sendRequest"
      | "setDONAddress"
      | "setDONPublicKey"
      | "setNodePublicKey"
      | "setRegistry"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BASE_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteNodePublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodePublicKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredFee",
    values: [BytesLike, FunctionsBillingRegistryInterface.RequestBillingStruct]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDONAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDONPublicKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodePublicKey",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteNodePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodePublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDONAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
}

export interface MockFunctionsOracle extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: MockFunctionsOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_FEE: TypedContractMethod<[], [bigint], "view">;

  deleteNodePublicKey: TypedContractMethod<
    [node: AddressLike],
    [void],
    "nonpayable"
  >;

  estimateCost: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAllNodePublicKeys: TypedContractMethod<[], [[string[], string[]]], "view">;

  getDONPublicKey: TypedContractMethod<[], [string], "view">;

  getRegistry: TypedContractMethod<[], [string], "view">;

  getRequiredFee: TypedContractMethod<
    [
      data: BytesLike,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [bigint],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  sendRequest: TypedContractMethod<
    [subscriptionId: BigNumberish, data: BytesLike, gasLimit: BigNumberish],
    [string],
    "nonpayable"
  >;

  setDONAddress: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  setDONPublicKey: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  setNodePublicKey: TypedContractMethod<
    [node: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  setRegistry: TypedContractMethod<
    [_registry: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteNodePublicKey"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateCost"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllNodePublicKeys"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "getDONPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredFee"
  ): TypedContractMethod<
    [
      data: BytesLike,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, data: BytesLike, gasLimit: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDONAddress"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDONPublicKey"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNodePublicKey"
  ): TypedContractMethod<
    [node: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRegistry"
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;

  filters: {};
}
