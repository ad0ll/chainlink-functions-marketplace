/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsBillingRegistry {
  export type CommitmentStruct = {
    subscriptionId: BigNumberish;
    client: AddressLike;
    gasLimit: BigNumberish;
    gasPrice: BigNumberish;
    don: AddressLike;
    donFee: BigNumberish;
    registryFee: BigNumberish;
    estimatedCost: BigNumberish;
    timestamp: BigNumberish;
  };

  export type CommitmentStructOutput = [
    subscriptionId: bigint,
    client: string,
    gasLimit: bigint,
    gasPrice: bigint,
    don: string,
    donFee: bigint,
    registryFee: bigint,
    estimatedCost: bigint,
    timestamp: bigint
  ] & {
    subscriptionId: bigint;
    client: string;
    gasLimit: bigint;
    gasPrice: bigint;
    don: string;
    donFee: bigint;
    registryFee: bigint;
    estimatedCost: bigint;
    timestamp: bigint;
  };
}

export declare namespace FunctionsBillingRegistryInterface {
  export type RequestBillingStruct = {
    subscriptionId: BigNumberish;
    client: AddressLike;
    gasLimit: BigNumberish;
    gasPrice: BigNumberish;
  };

  export type RequestBillingStructOutput = [
    subscriptionId: bigint,
    client: string,
    gasLimit: bigint,
    gasPrice: bigint
  ] & {
    subscriptionId: bigint;
    client: string;
    gasLimit: bigint;
    gasPrice: bigint;
  };
}

export interface FunctionsBillingRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_CONSUMERS"
      | "acceptOwnership"
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "estimateCost"
      | "fulfillAndBill"
      | "getAuthorizedSenders"
      | "getConfig"
      | "getCurrentsubscriptionId"
      | "getRequestConfig"
      | "getRequiredFee"
      | "getSubscription"
      | "getSubscriptionOwner"
      | "getTotalBalance"
      | "initialize"
      | "isAuthorizedSender"
      | "onTokenTransfer"
      | "oracleWithdraw"
      | "owner"
      | "ownerCancelSubscription"
      | "pause"
      | "paused"
      | "pendingRequestExists"
      | "recoverFunds"
      | "removeConsumer"
      | "requestSubscriptionOwnerTransfer"
      | "setAuthorizedSenders"
      | "setConfig"
      | "startBilling"
      | "timeoutRequests"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedSendersChanged"
      | "BillingEnd"
      | "BillingStart"
      | "ConfigSet"
      | "FundsRecovered"
      | "Initialized"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "Paused"
      | "RequestTimedOut"
      | "SubscriptionCanceled"
      | "SubscriptionConsumerAdded"
      | "SubscriptionConsumerRemoved"
      | "SubscriptionCreated"
      | "SubscriptionFunded"
      | "SubscriptionOwnerTransferRequested"
      | "SubscriptionOwnerTransferred"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_CONSUMERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAndBill",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentsubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredFee",
    values: [BytesLike, FunctionsBillingRegistryInterface.RequestBillingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedSenders",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startBilling",
    values: [BytesLike, FunctionsBillingRegistryInterface.RequestBillingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutRequests",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_CONSUMERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAndBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentsubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBilling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AuthorizedSendersChangedEvent {
  export type InputTuple = [senders: AddressLike[], changedBy: AddressLike];
  export type OutputTuple = [senders: string[], changedBy: string];
  export interface OutputObject {
    senders: string[];
    changedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BillingEndEvent {
  export type InputTuple = [
    requestId: BytesLike,
    subscriptionId: BigNumberish,
    signerPayment: BigNumberish,
    transmitterPayment: BigNumberish,
    totalCost: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    requestId: string,
    subscriptionId: bigint,
    signerPayment: bigint,
    transmitterPayment: bigint,
    totalCost: bigint,
    success: boolean
  ];
  export interface OutputObject {
    requestId: string;
    subscriptionId: bigint;
    signerPayment: bigint;
    transmitterPayment: bigint;
    totalCost: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BillingStartEvent {
  export type InputTuple = [
    requestId: BytesLike,
    commitment: FunctionsBillingRegistry.CommitmentStruct
  ];
  export type OutputTuple = [
    requestId: string,
    commitment: FunctionsBillingRegistry.CommitmentStructOutput
  ];
  export interface OutputObject {
    requestId: string;
    commitment: FunctionsBillingRegistry.CommitmentStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    maxGasLimit: BigNumberish,
    stalenessSeconds: BigNumberish,
    gasAfterPaymentCalculation: BigNumberish,
    fallbackWeiPerUnitLink: BigNumberish,
    gasOverhead: BigNumberish
  ];
  export type OutputTuple = [
    maxGasLimit: bigint,
    stalenessSeconds: bigint,
    gasAfterPaymentCalculation: bigint,
    fallbackWeiPerUnitLink: bigint,
    gasOverhead: bigint
  ];
  export interface OutputObject {
    maxGasLimit: bigint;
    stalenessSeconds: bigint;
    gasAfterPaymentCalculation: bigint;
    fallbackWeiPerUnitLink: bigint;
    gasOverhead: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsRecoveredEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestTimedOutEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCanceledEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    subscriptionId: bigint,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    subscriptionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerAddedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    consumer: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, consumer: string];
  export interface OutputObject {
    subscriptionId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerRemovedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    consumer: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, consumer: string];
  export interface OutputObject {
    subscriptionId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [subscriptionId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [subscriptionId: bigint, owner: string];
  export interface OutputObject {
    subscriptionId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    oldBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    subscriptionId: bigint,
    oldBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    subscriptionId: bigint;
    oldBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferRequestedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, from: string, to: string];
  export interface OutputObject {
    subscriptionId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferredEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subscriptionId: bigint, from: string, to: string];
  export interface OutputObject {
    subscriptionId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunctionsBillingRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: FunctionsBillingRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_CONSUMERS: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  acceptSubscriptionOwnerTransfer: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addConsumer: TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  estimateCost: TypedContractMethod<
    [
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      donFee: BigNumberish,
      registryFee: BigNumberish
    ],
    [bigint],
    "view"
  >;

  fulfillAndBill: TypedContractMethod<
    [
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      transmitter: AddressLike,
      signers: AddressLike[],
      signerCount: BigNumberish,
      reportValidationGas: BigNumberish,
      initialGas: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getAuthorizedSenders: TypedContractMethod<[], [string[]], "view">;

  getConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, string, string] & {
        maxGasLimit: bigint;
        stalenessSeconds: bigint;
        gasAfterPaymentCalculation: bigint;
        fallbackWeiPerUnitLink: bigint;
        gasOverhead: bigint;
        linkAddress: string;
        linkPriceFeed: string;
      }
    ],
    "view"
  >;

  getCurrentsubscriptionId: TypedContractMethod<[], [bigint], "view">;

  getRequestConfig: TypedContractMethod<[], [[bigint, string[]]], "view">;

  getRequiredFee: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [bigint],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [
      [bigint, string, string[]] & {
        balance: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;

  getSubscriptionOwner: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [string],
    "view"
  >;

  getTotalBalance: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [link: AddressLike, linkEthFeed: AddressLike, oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  isAuthorizedSender: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "view"
  >;

  onTokenTransfer: TypedContractMethod<
    [arg0: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  oracleWithdraw: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerCancelSubscription: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingRequestExists: TypedContractMethod<
    [subscriptionId: BigNumberish],
    [boolean],
    "view"
  >;

  recoverFunds: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  removeConsumer: TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  requestSubscriptionOwnerTransfer: TypedContractMethod<
    [subscriptionId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setAuthorizedSenders: TypedContractMethod<
    [senders: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setConfig: TypedContractMethod<
    [
      maxGasLimit: BigNumberish,
      stalenessSeconds: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fallbackWeiPerUnitLink: BigNumberish,
      gasOverhead: BigNumberish,
      requestTimeoutSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  startBilling: TypedContractMethod<
    [
      data: BytesLike,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [string],
    "nonpayable"
  >;

  timeoutRequests: TypedContractMethod<
    [requestIdsToTimeout: BytesLike[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_CONSUMERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptSubscriptionOwnerTransfer"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateCost"
  ): TypedContractMethod<
    [
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      donFee: BigNumberish,
      registryFee: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fulfillAndBill"
  ): TypedContractMethod<
    [
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      transmitter: AddressLike,
      signers: AddressLike[],
      signerCount: BigNumberish,
      reportValidationGas: BigNumberish,
      initialGas: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAuthorizedSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, string, string] & {
        maxGasLimit: bigint;
        stalenessSeconds: bigint;
        gasAfterPaymentCalculation: bigint;
        fallbackWeiPerUnitLink: bigint;
        gasOverhead: bigint;
        linkAddress: string;
        linkPriceFeed: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentsubscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequestConfig"
  ): TypedContractMethod<[], [[bigint, string[]]], "view">;
  getFunction(
    nameOrSignature: "getRequiredFee"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish],
    [
      [bigint, string, string[]] & {
        balance: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionOwner"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [link: AddressLike, linkEthFeed: AddressLike, oracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedSender"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onTokenTransfer"
  ): TypedContractMethod<
    [arg0: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracleWithdraw"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerCancelSubscription"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subscriptionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverFunds"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeConsumer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSubscriptionOwnerTransfer"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedSenders"
  ): TypedContractMethod<[senders: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      maxGasLimit: BigNumberish,
      stalenessSeconds: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fallbackWeiPerUnitLink: BigNumberish,
      gasOverhead: BigNumberish,
      requestTimeoutSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startBilling"
  ): TypedContractMethod<
    [
      data: BytesLike,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutRequests"
  ): TypedContractMethod<
    [requestIdsToTimeout: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AuthorizedSendersChanged"
  ): TypedContractEvent<
    AuthorizedSendersChangedEvent.InputTuple,
    AuthorizedSendersChangedEvent.OutputTuple,
    AuthorizedSendersChangedEvent.OutputObject
  >;
  getEvent(
    key: "BillingEnd"
  ): TypedContractEvent<
    BillingEndEvent.InputTuple,
    BillingEndEvent.OutputTuple,
    BillingEndEvent.OutputObject
  >;
  getEvent(
    key: "BillingStart"
  ): TypedContractEvent<
    BillingStartEvent.InputTuple,
    BillingStartEvent.OutputTuple,
    BillingStartEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "FundsRecovered"
  ): TypedContractEvent<
    FundsRecoveredEvent.InputTuple,
    FundsRecoveredEvent.OutputTuple,
    FundsRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RequestTimedOut"
  ): TypedContractEvent<
    RequestTimedOutEvent.InputTuple,
    RequestTimedOutEvent.OutputTuple,
    RequestTimedOutEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCanceled"
  ): TypedContractEvent<
    SubscriptionCanceledEvent.InputTuple,
    SubscriptionCanceledEvent.OutputTuple,
    SubscriptionCanceledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerAdded"
  ): TypedContractEvent<
    SubscriptionConsumerAddedEvent.InputTuple,
    SubscriptionConsumerAddedEvent.OutputTuple,
    SubscriptionConsumerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerRemoved"
  ): TypedContractEvent<
    SubscriptionConsumerRemovedEvent.InputTuple,
    SubscriptionConsumerRemovedEvent.OutputTuple,
    SubscriptionConsumerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFunded"
  ): TypedContractEvent<
    SubscriptionFundedEvent.InputTuple,
    SubscriptionFundedEvent.OutputTuple,
    SubscriptionFundedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferRequested"
  ): TypedContractEvent<
    SubscriptionOwnerTransferRequestedEvent.InputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferred"
  ): TypedContractEvent<
    SubscriptionOwnerTransferredEvent.InputTuple,
    SubscriptionOwnerTransferredEvent.OutputTuple,
    SubscriptionOwnerTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AuthorizedSendersChanged(address[],address)": TypedContractEvent<
      AuthorizedSendersChangedEvent.InputTuple,
      AuthorizedSendersChangedEvent.OutputTuple,
      AuthorizedSendersChangedEvent.OutputObject
    >;
    AuthorizedSendersChanged: TypedContractEvent<
      AuthorizedSendersChangedEvent.InputTuple,
      AuthorizedSendersChangedEvent.OutputTuple,
      AuthorizedSendersChangedEvent.OutputObject
    >;

    "BillingEnd(bytes32,uint64,uint96,uint96,uint96,bool)": TypedContractEvent<
      BillingEndEvent.InputTuple,
      BillingEndEvent.OutputTuple,
      BillingEndEvent.OutputObject
    >;
    BillingEnd: TypedContractEvent<
      BillingEndEvent.InputTuple,
      BillingEndEvent.OutputTuple,
      BillingEndEvent.OutputObject
    >;

    "BillingStart(bytes32,tuple)": TypedContractEvent<
      BillingStartEvent.InputTuple,
      BillingStartEvent.OutputTuple,
      BillingStartEvent.OutputObject
    >;
    BillingStart: TypedContractEvent<
      BillingStartEvent.InputTuple,
      BillingStartEvent.OutputTuple,
      BillingStartEvent.OutputObject
    >;

    "ConfigSet(uint32,uint32,uint256,int256,uint32)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "FundsRecovered(address,uint256)": TypedContractEvent<
      FundsRecoveredEvent.InputTuple,
      FundsRecoveredEvent.OutputTuple,
      FundsRecoveredEvent.OutputObject
    >;
    FundsRecovered: TypedContractEvent<
      FundsRecoveredEvent.InputTuple,
      FundsRecoveredEvent.OutputTuple,
      FundsRecoveredEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RequestTimedOut(bytes32)": TypedContractEvent<
      RequestTimedOutEvent.InputTuple,
      RequestTimedOutEvent.OutputTuple,
      RequestTimedOutEvent.OutputObject
    >;
    RequestTimedOut: TypedContractEvent<
      RequestTimedOutEvent.InputTuple,
      RequestTimedOutEvent.OutputTuple,
      RequestTimedOutEvent.OutputObject
    >;

    "SubscriptionCanceled(uint64,address,uint256)": TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;
    SubscriptionCanceled: TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;

    "SubscriptionConsumerAdded(uint64,address)": TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;
    SubscriptionConsumerAdded: TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;

    "SubscriptionConsumerRemoved(uint64,address)": TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;
    SubscriptionConsumerRemoved: TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;

    "SubscriptionCreated(uint64,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionFunded(uint64,uint256,uint256)": TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;
    SubscriptionFunded: TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;

    "SubscriptionOwnerTransferRequested(uint64,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;
    SubscriptionOwnerTransferRequested: TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;

    "SubscriptionOwnerTransferred(uint64,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
    SubscriptionOwnerTransferred: TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
