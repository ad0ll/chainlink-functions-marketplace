/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Functions {
  export type RequestStruct = {
    codeLocation: BigNumberish;
    secretsLocation: BigNumberish;
    language: BigNumberish;
    source: string;
    secrets: BytesLike;
    args: string[];
  };

  export type RequestStructOutput = [
    codeLocation: bigint,
    secretsLocation: bigint,
    language: bigint,
    source: string,
    secrets: string,
    args: string[]
  ] & {
    codeLocation: bigint;
    secretsLocation: bigint;
    language: bigint;
    source: string;
    secrets: string;
    args: string[];
  };
}

export declare namespace EventSpammer {
  export type FunctionMetadataStruct = {
    fee: BigNumberish;
    owner: AddressLike;
    category: BytesLike;
    subId: BigNumberish;
    name: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    request: Functions.RequestStruct;
    subscriptionPool: BigNumberish;
    unlockedProfitPool: BigNumberish;
    lockedProfitPool: BigNumberish;
  };

  export type FunctionMetadataStructOutput = [
    fee: bigint,
    owner: string,
    category: string,
    subId: bigint,
    name: string,
    desc: string,
    imageUrl: string,
    expectedArgs: string[],
    request: Functions.RequestStructOutput,
    subscriptionPool: bigint,
    unlockedProfitPool: bigint,
    lockedProfitPool: bigint
  ] & {
    fee: bigint;
    owner: string;
    category: string;
    subId: bigint;
    name: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    request: Functions.RequestStructOutput;
    subscriptionPool: bigint;
    unlockedProfitPool: bigint;
    lockedProfitPool: bigint;
  };
}

export interface EventSpammerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedCaller"
      | "authorizedCallers"
      | "emitCallFunction"
      | "emitCallbackWithData"
      | "emitRegisterFunction"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FunctionCallCompleted"
      | "FunctionCalled"
      | "FunctionRegistered"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCallers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCallFunction",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCallbackWithData",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRegisterFunction",
    values: [
      BytesLike,
      AddressLike,
      string,
      string,
      string,
      string[],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCallFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCallbackWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitRegisterFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FunctionCallCompletedEvent {
  export type InputTuple = [
    functionId: BytesLike,
    requestId: BytesLike,
    caller: AddressLike,
    owner: AddressLike,
    callbackFunction: BytesLike,
    usedGas: BigNumberish,
    response: BytesLike,
    err: BytesLike
  ];
  export type OutputTuple = [
    functionId: string,
    requestId: string,
    caller: string,
    owner: string,
    callbackFunction: string,
    usedGas: bigint,
    response: string,
    err: string
  ];
  export interface OutputObject {
    functionId: string;
    requestId: string;
    caller: string;
    owner: string;
    callbackFunction: string;
    usedGas: bigint;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunctionCalledEvent {
  export type InputTuple = [
    functionId: BytesLike,
    requestId: BytesLike,
    caller: AddressLike,
    owner: AddressLike,
    callbackFunction: BytesLike,
    gasDeposit: BigNumberish,
    baseFee: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    functionId: string,
    requestId: string,
    caller: string,
    owner: string,
    callbackFunction: string,
    gasDeposit: bigint,
    baseFee: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    functionId: string;
    requestId: string;
    caller: string;
    owner: string;
    callbackFunction: string;
    gasDeposit: bigint;
    baseFee: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunctionRegisteredEvent {
  export type InputTuple = [
    functionId: BytesLike,
    owner: AddressLike,
    metadata: EventSpammer.FunctionMetadataStruct
  ];
  export type OutputTuple = [
    functionId: string,
    owner: string,
    metadata: EventSpammer.FunctionMetadataStructOutput
  ];
  export interface OutputObject {
    functionId: string;
    owner: string;
    metadata: EventSpammer.FunctionMetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventSpammer extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: EventSpammerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedCaller: TypedContractMethod<
    [_caller: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedCallers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  emitCallFunction: TypedContractMethod<
    [
      _functionId: BytesLike,
      _requestId: BytesLike,
      _caller: AddressLike,
      _owner: AddressLike,
      _callbackFunction: BytesLike,
      _gasDeposit: BigNumberish,
      _fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitCallbackWithData: TypedContractMethod<
    [
      _functionId: BytesLike,
      _owner: AddressLike,
      _caller: AddressLike,
      _requestId: BytesLike,
      _callbackFunction: BytesLike,
      _usedGas: BigNumberish,
      _response: BytesLike,
      _err: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  emitRegisterFunction: TypedContractMethod<
    [
      _functionId: BytesLike,
      _owner: AddressLike,
      _name: string,
      _desc: string,
      _imageUrl: string,
      _expectedArgs: string[],
      _category: BytesLike,
      _subId: BigNumberish,
      _fee: BigNumberish,
      _codeLocation: BigNumberish,
      _source: string
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedCaller"
  ): TypedContractMethod<[_caller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedCallers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "emitCallFunction"
  ): TypedContractMethod<
    [
      _functionId: BytesLike,
      _requestId: BytesLike,
      _caller: AddressLike,
      _owner: AddressLike,
      _callbackFunction: BytesLike,
      _gasDeposit: BigNumberish,
      _fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitCallbackWithData"
  ): TypedContractMethod<
    [
      _functionId: BytesLike,
      _owner: AddressLike,
      _caller: AddressLike,
      _requestId: BytesLike,
      _callbackFunction: BytesLike,
      _usedGas: BigNumberish,
      _response: BytesLike,
      _err: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitRegisterFunction"
  ): TypedContractMethod<
    [
      _functionId: BytesLike,
      _owner: AddressLike,
      _name: string,
      _desc: string,
      _imageUrl: string,
      _expectedArgs: string[],
      _category: BytesLike,
      _subId: BigNumberish,
      _fee: BigNumberish,
      _codeLocation: BigNumberish,
      _source: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FunctionCallCompleted"
  ): TypedContractEvent<
    FunctionCallCompletedEvent.InputTuple,
    FunctionCallCompletedEvent.OutputTuple,
    FunctionCallCompletedEvent.OutputObject
  >;
  getEvent(
    key: "FunctionCalled"
  ): TypedContractEvent<
    FunctionCalledEvent.InputTuple,
    FunctionCalledEvent.OutputTuple,
    FunctionCalledEvent.OutputObject
  >;
  getEvent(
    key: "FunctionRegistered"
  ): TypedContractEvent<
    FunctionRegisteredEvent.InputTuple,
    FunctionRegisteredEvent.OutputTuple,
    FunctionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FunctionCallCompleted(bytes32,bytes32,address,address,bytes32,uint256,bytes,bytes)": TypedContractEvent<
      FunctionCallCompletedEvent.InputTuple,
      FunctionCallCompletedEvent.OutputTuple,
      FunctionCallCompletedEvent.OutputObject
    >;
    FunctionCallCompleted: TypedContractEvent<
      FunctionCallCompletedEvent.InputTuple,
      FunctionCallCompletedEvent.OutputTuple,
      FunctionCallCompletedEvent.OutputObject
    >;

    "FunctionCalled(bytes32,bytes32,address,address,bytes32,uint256,uint256,uint256)": TypedContractEvent<
      FunctionCalledEvent.InputTuple,
      FunctionCalledEvent.OutputTuple,
      FunctionCalledEvent.OutputObject
    >;
    FunctionCalled: TypedContractEvent<
      FunctionCalledEvent.InputTuple,
      FunctionCalledEvent.OutputTuple,
      FunctionCalledEvent.OutputObject
    >;

    "FunctionRegistered(bytes32,address,tuple)": TypedContractEvent<
      FunctionRegisteredEvent.InputTuple,
      FunctionRegisteredEvent.OutputTuple,
      FunctionRegisteredEvent.OutputObject
    >;
    FunctionRegistered: TypedContractEvent<
      FunctionRegisteredEvent.InputTuple,
      FunctionRegisteredEvent.OutputTuple,
      FunctionRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
