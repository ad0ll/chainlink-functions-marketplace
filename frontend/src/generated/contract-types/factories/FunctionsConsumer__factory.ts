/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  FunctionsConsumer,
  FunctionsConsumerInterface,
} from "../FunctionsConsumer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EmptyArgs",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySecrets",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySource",
    type: "error",
  },
  {
    inputs: [],
    name: "NoInlineSecrets",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestIsAlreadyPending",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestIsNotPending",
    type: "error",
  },
  {
    inputs: [],
    name: "SenderIsNotRegistry",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "FulfillRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "OCRResponse",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "addSimulatedRequestId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum Functions.Location",
            name: "codeLocation",
            type: "uint8",
          },
          {
            internalType: "enum Functions.Location",
            name: "secretsLocation",
            type: "uint8",
          },
          {
            internalType: "enum Functions.CodeLanguage",
            name: "language",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "source",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "secrets",
            type: "bytes",
          },
          {
            internalType: "string[]",
            name: "args",
            type: "string[]",
          },
        ],
        internalType: "struct Functions.Request",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    name: "estimateCost",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "source",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "secrets",
        type: "bytes",
      },
      {
        internalType: "string[]",
        name: "args",
        type: "string[]",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
    ],
    name: "executeRequest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDONPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "handleOracleFulfillment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "latestError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestResponse",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracle",
        type: "address",
      },
    ],
    name: "updateOracleAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100ca57601f6122be38819003918201601f19168301916001600160401b038311848410176100cf578084926020946040528339810103126100ca57516001600160a01b038116908190036100ca57600080546001600160a01b03199081169092179055331561008557339060025416176002556040516121d890816100e68239f35b60405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80630ca76175146100d75780631aa46f59146100d257806327714589146100cd57806330bda99d146100c857806379ba5097146100c35780638da5cb5b146100be578063bef3a2f0146100b9578063d328a91e146100b4578063d4b39175146100af578063f2fde38b146100aa578063f7023bb6146100a55763fffeb84e146100a057600080fd5b610b7e565b610b3a565b610a67565b61095b565b6107c1565b6106e3565b610629565b61055f565b6104c3565b6103fb565b61035b565b6101cb565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761010e57604052565b6100dc565b90601f8019910116810190811067ffffffffffffffff82111761010e57604052565b6040519060c0820182811067ffffffffffffffff82111761010e57604052565b67ffffffffffffffff811161010e57601f01601f191660200190565b92919261017d82610155565b9161018b6040519384610113565b8294818452818301116101a8578281602093846000960137010152565b600080fd5b9080601f830112156101a8578160206101c893359101610171565b90565b346101a85760603660031901126101a85767ffffffffffffffff6024358181116101a8576101fd9036906004016101ad565b906044358181116101a8576102169036906004016101ad565b90825190811161010e576102348161022f600554610650565b6114d0565b602080601f83116001146102b1575091816102a1927f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c9258911562946000916102a6575b508160011b916000199060031b1c1916176005555b610291816115b2565b604051918291600435958361169c565b0390a2005b905085015138610273565b600560005290601f1983167f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000905b828210610343575050927f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c92589115629492600192826102a1961061032a575b5050811b01600555610288565b87015160001960f88460031b161c19169055388061031d565b80600185968294968b015181550195019301906102e2565b346101a85760003660031901126101a8576020600454604051908152f35b9181601f840112156101a85782359167ffffffffffffffff83116101a857602083818601950101116101a857565b6064359067ffffffffffffffff821682036101a857565b6024359067ffffffffffffffff821682036101a857565b6084359063ffffffff821682036101a857565b6044359063ffffffff821682036101a857565b346101a85760a03660031901126101a85767ffffffffffffffff6004358181116101a85761042d903690600401610379565b91906024358281116101a857610447903690600401610379565b939092604435928184116101a857366023850112156101a85783600401359182116101a8573660248360051b860101116101a8576104ae9561049e9561048b6103a7565b9460246104966103d5565b97019361110a565b6040519081529081906020820190565b0390f35b6001600160a01b038116036101a857565b346101a85760403660031901126101a8576004356104e0816104b2565b6024356104eb610c25565b60009181835260016020526001600160a01b0360408420541661053557610532918352600160205260408320906001600160a01b03166001600160a01b0319825416179055565b80f35b60046040517f8b457ad2000000000000000000000000000000000000000000000000000000008152fd5b346101a857600080600319360112610626576001600160a01b03806003541633036105e2576002546001600160a01b0316600280546001600160a01b03191633179055906105b86001600160a01b031960035416600355565b3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b606460405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152fd5b80fd5b346101a85760003660031901126101a85760206001600160a01b0360025416604051908152f35b90600182811c92168015610680575b602083101461066a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161065f565b60005b83811061069d5750506000910152565b818101518382015260200161068d565b906020916106c68151809281855285808601910161068a565b601f01601f1916010190565b9060206101c89281815201906106ad565b346101a85760008060031936011261062657604051908060055461070681610650565b80855291600191808316908115610797575060011461073c575b6104ae8561073081870382610113565b604051918291826106d2565b9250600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061077f575050508101602001610730826104ae610720565b80546020858701810191909152909301928101610764565b8695506104ae9693506020925061073094915060ff191682840152151560051b8201019293610720565b346101a857600080600319360112610626576004816001600160a01b03815416604051928380927fd328a91e0000000000000000000000000000000000000000000000000000000082525afa9081156108b0578291610829575b604051806104ae84826106d2565b90503d8083833e61083a8183610113565b8101906020818303126108a85780519067ffffffffffffffff82116108ac570181601f820112156108a85780519261087184610155565b9261087f6040519485610113565b8484526020858401011161062657506104ae926108a2916020808501910161068a565b3861081b565b8280fd5b8380fd5b610c7d565b359060028210156101a857565b359060018210156101a857565b90929167ffffffffffffffff80851161010e578460051b60405193602080956108fa82850182610113565b8098815201918101938085116101a85781925b85841061091d5750505050505050565b83358581116101a857879161093584849387016101ad565b81520193019261090d565b9080601f830112156101a8578160206101c8933591016108cf565b346101a8576003196080368201126101a85760043567ffffffffffffffff918282116101a85760c09082360301126101a857610995610135565b6109a1826004016108b5565b81526109af602483016108b5565b60208201526109c0604483016108c2565b604082015260648201358381116101a8576109e190600436918501016101ad565b606082015260848201358381116101a857610a0290600436918501016101ad565b608082015260a48201359283116101a857610a29610a489260046104ae9536920101610940565b60a0820152610a366103be565b610a3e6103e8565b9060643592610cad565b6040516bffffffffffffffffffffffff90911681529081906020820190565b346101a85760203660031901126101a8576001600160a01b03600435610a8c816104b2565b610a94610c25565b16338114610af657806001600160a01b03196003541617600355610acf610ac36002546001600160a01b031690565b6001600160a01b031690565b7fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278600080a3005b606460405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b346101a85760203660031901126101a8576001600160a01b03600435610b5f816104b2565b610b67610c25565b166001600160a01b03196000541617600055600080f35b346101a857600080600319360112610626576040519080600654610ba181610650565b808552916001918083169081156107975750600114610bca576104ae8561073081870382610113565b9250600683527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b828410610c0d575050508101602001610730826104ae610720565b80546020858701810191909152909301928101610bf2565b6001600160a01b03600254163303610c3957565b606460405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152fd5b6040513d6000823e3d90fd5b908160209103126101a857516bffffffffffffffffffffffff811681036101a85790565b67ffffffffffffffff610d1d9492602094610cd36001600160a01b036000541694610f7a565b9463ffffffff604051988997889687967fd227d2450000000000000000000000000000000000000000000000000000000088521660048701526080602487015260848601906106ad565b92166044840152606483015203915afa9081156108b057600091610d3f575090565b6101c8915060203d8111610d60575b610d588183610113565b810190610c89565b503d610d4e565b60405190610d74826100f2565b6000602083606081520152565b60405190610d8e826100f2565b6000602083610d9b610d67565b81520152565b60405190610dae826100f2565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b634e487b7160e01b600052602160045260246000fd5b60021115610dfa57565b610dda565b60405190610e0c826100f2565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b60011115610dfa57565b60405190610e4f826100f2565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b60405190610e88826100f2565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b634e487b7160e01b600052601160045260246000fd5b6000198114610ed95760010190565b610eb4565b8051821015610ef25760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405190610f15826100f2565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b60405190610f4e826100f2565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b610f82610d81565b90610f8d82516116eb565b50610f9f610f99610da1565b83611df9565b610fbc8151610fad81610df0565b610fb681610df0565b8361176a565b610fc7610f99610dff565b610fe16040820151610fd881610e38565b610fb681610e38565b610fec610f99610e42565b610ffa606082015183611df9565b60a081018051516110b2575b50608081019081515161101b575b5050515190565b60200190815161102a81610df0565b61103381610df0565b15611088576110696110819261105061104a610f08565b86611df9565b5161105a81610df0565b61106381610df0565b8461176a565b61107a611074610f41565b84611df9565b5182611d43565b3880611014565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b926110be611074610e7b565b6110c783611e7e565b60005b845180518210156110f757906110ed6110e6826110f294610ede565b5186611df9565b610eca565b6110ca565b5050925061110482611f0a565b38611006565b96959491909392611119610c25565b6040519460c0860186811067ffffffffffffffff82111761010e57604052600086526000602087015261116c604087019960008b52606088019260608452606060808a0152606060a08a01523691610171565b908151156111d55760006111949a8189525252806111b9575b50508061119d575b505061133c565b6101c881600455565b6111b2916111ac9136916108cf565b8261123d565b388061118d565b6111ce916111c8913691610171565b846111ff565b3880611185565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b815115611213576001602082015260800152565b60046040517fe889636f000000000000000000000000000000000000000000000000000000008152fd5b81511561124a5760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b604051906060820182811067ffffffffffffffff82111761010e57604052602982527f6c69656e74206c696200000000000000000000000000000000000000000000006040837f53656e64696e6720726571756573742066726f6d2066756e6374696f6e73206360208201520152565b908160209103126101a8575190565b9161132063ffffffff9167ffffffffffffffff6040949796971685526060602086015260608501906106ad565b9416910152565b908160209103126101a857516101c8816104b2565b6113ae929161135161134c611274565b61213a565b600093849261137361136d610ac386546001600160a01b031690565b91610f7a565b946040519687809481937f28242b040000000000000000000000000000000000000000000000000000000083526020998a98600485016112f3565b03925af19283156108b057819361149e575b5080826113d9610ac3600494546001600160a01b031690565b604051938480927f5ab1bd530000000000000000000000000000000000000000000000000000000082525afa9283156108b05784937f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db89361146c928492611471575b5050611451856000526001602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b80a290565b6114909250803d10611497575b6114888183610113565b810190611327565b388061143b565b503d61147e565b60049193506114c290833d85116114c9575b6114ba8183610113565b8101906112e4565b92906113c0565b503d6114b0565b601f81116114dc575050565b600090600582527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0906020601f850160051c83019410611537575b601f0160051c01915b82811061152c57505050565b818155600101611520565b9092508290611517565b601f811161154d575050565b600090600682527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f906020601f850160051c830194106115a8575b601f0160051c01915b82811061159d57505050565b818155600101611591565b9092508290611588565b90815167ffffffffffffffff811161010e576115d8816115d3600654610650565b611541565b602080601f83116001146116145750819293600092611609575b50508160011b916000199060031b1c191617600655565b0151905038806115f2565b90601f1983169461164760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90565b926000905b87821061168457505083600195961061166b575b505050811b01600655565b015160001960f88460031b161c19169055388080611660565b8060018596829496860151815501950193019061164c565b90916116b36101c8936040845260408401906106ad565b9160208184039101526106ad565b601f19810191908211610ed957565b9060208201809211610ed957565b91908201809211610ed957565b6116f3610d67565b5061010060208201526040518082526000815261012081019081106101a85760405290565b90611721610d67565b50601f811680611750575b50806020830152604051908183526000825281016020019081106101a85760405290565b60200360208111610ed9578101809111610ed9573861172c565b90815191611776610d67565b508251516001810190818111610ed95760208501518110156117d1575b60c260206117c796519283010153805182116117c9575b5050604051916020830152602082526117c2826100f2565b611d43565b565b5238806117aa565b8160011b9482860460021483151715610ed9576020816118036117c7986117fc60c295519184611718565b5082611c8b565b5096505050611793565b908160011b9180830460021490151715610ed957565b61182b610d67565b508051516001810190818111610ed9576020830151811015611864575b605b6020845192830101538051821161186057505090565b5290565b8160011b82810460021483151715610ed95761188d9061188685519186611718565b5084611c8b565b50611848565b61189b610d67565b508051516001810190818111610ed95760208301518110156118d0575b605a6020845192830101538051821161186057505090565b8160011b82810460021483151715610ed9576118f29061188685519186611718565b506118b8565b611900610d67565b508051516001810190818111610ed9576020830151811015611935575b60596020845192830101538051821161186057505090565b8160011b82810460021483151715610ed9576119579061188685519186611718565b5061191d565b611965610d67565b508051516001810190818111610ed957602083015181101561199a575b60586020845192830101538051821161186057505090565b8160011b82810460021483151715610ed9576119bc9061188685519186611718565b50611982565b6119ca610d67565b508051516001810190818111610ed95760208301518110156119ff575b607b6020845192830101538051821161186057505090565b8160011b82810460021483151715610ed957611a219061188685519186611718565b506119e7565b611a2f610d67565b508051516001810190818111610ed9576020830151811015611a64575b607a6020845192830101538051821161186057505090565b8160011b82810460021483151715610ed957611a869061188685519186611718565b50611a4c565b611a94610d67565b508051516001810190818111610ed9576020830151811015611ac9575b60796020845192830101538051821161186057505090565b8160011b82810460021483151715610ed957611aeb9061188685519186611718565b50611ab1565b611af9610d67565b508051516001810190818111610ed9576020830151811015611b2e575b60786020845192830101538051821161186057505090565b8160011b82810460021483151715610ed957611b509061188685519186611718565b50611b16565b90611b5f610d67565b508151516001810191828211610ed9576020840151821015611b92575b6020845192830101538051821161186057505090565b8260011b83810460021484151715610ed957611bbb90611bb486519187611718565b5085611c8b565b50611b7c565b90611bce82519183611718565b50611bd7610d67565b50805190611be3610d67565b50611bf18151831115611d3c565b82515192611bff83856116de565b916020928284809401518211611c74575b5183815197820101968211611c6c575b505001915b81811015611c465760001991036101000a0190811990511690825116179052565b9192611c61611c5b611c6792865181526116d0565b946116d0565b926116c1565b611c25565b523880611c20565b611c86611c808361180d565b82611bc1565b611c10565b90611c94610d67565b508051611c9f610d67565b50611cad8251821115611d3c565b82515191611cbb82846116de565b6020918291828701518111611d25575b865183815197820101968211611d1d575b505001915b81811015611d035760001991036101000a019081199051169082511617905290565b9192611c61611c5b611d1892865181526116d0565b611ce1565b523880611cdc565b611d37611d318261180d565b88611bc1565b611ccb565b156101a857565b8151611d7b92919067ffffffffffffffff81169060178211611d7e57611d739150604060ff845192161790611b56565b505b51611c8b565b50565b5060ff8111611da357611d9d90611d95835161195d565b5082516120d4565b50611d75565b61ffff8111611dc257611d9d90611dba83516118f8565b50825161206d565b63ffffffff8111611de357611d9d90611ddb8351611893565b508251612004565b611d9d90611df18351611823565b508251611f97565b8151611d7b92919067ffffffffffffffff81169060178211611e2957611d739150606060ff845192161790611b56565b5060ff8111611e4057611d9d90611d958351611af1565b61ffff8111611e5757611d9d90611dba8351611a8c565b63ffffffff8111611e7057611d9d90611ddb8351611a27565b611d9d90611df183516119c2565b805190611e89610d67565b508151516001810190818111610ed9576020840151811015611ed7575b609f6020809551928301015380518211611ecf575b50500180519060018201809211610ed95752565b523880611ebb565b8160011b9382850460021483151715610ed957602081611f0082976117fc609f95519184611718565b5095505050611ea6565b805190611f15610d67565b508151516001810190818111610ed9576020840151811015611f64575b60ff6020809551928301015380518211611f5c575b5050018051600019810191908211610ed95752565b523880611f47565b8160011b9382850460021483151715610ed957602081611f8d82976117fc60ff95519184611718565b5095505050611f32565b90611fa0610d67565b50815151806008019182600811610ed95760208401518311611fe3575b60088451928301019067ffffffffffffffff198251161790528051821161186057505090565b8260011b83810460021484151715610ed957611fff9085611bc1565b611fbd565b9061200d610d67565b50815151806004019182600411610ed9576020840151831161204c575b60048451928301019063ffffffff198251161790528051821161186057505090565b8260011b83810460021484151715610ed9576120689085611bc1565b61202a565b90612076610d67565b50815151806002019182600211610ed957602084015183116120b3575b60028451928301019061ffff198251161790528051821161186057505090565b8260011b83810460021484151715610ed9576120cf9085611bc1565b612093565b906120dd610d67565b50815151806001019182600111610ed95760208401518311612119575b60018451928301019060ff198251161790528051821161186057505090565b8260011b83810460021484151715610ed9576121359085611bc1565b6120fa565b6000809160405161218f8161218160208201947f41304fac0000000000000000000000000000000000000000000000000000000086526020602484015260448301906106ad565b03601f198101835282610113565b51906a636f6e736f6c652e6c6f675afa5056fea2646970667358221220c907a6915ebb4bc8bcd06db95c9468a2db0ee29700c9f02884b5beca96d454f264736f6c63430008120033";

type FunctionsConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FunctionsConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FunctionsConsumer__factory extends ContractFactory {
  constructor(...args: FunctionsConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    oracle: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(oracle, overrides || {});
  }
  override deploy(
    oracle: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(oracle, overrides || {}) as Promise<
      FunctionsConsumer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FunctionsConsumer__factory {
    return super.connect(runner) as FunctionsConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FunctionsConsumerInterface {
    return new Interface(_abi) as FunctionsConsumerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FunctionsConsumer {
    return new Contract(address, _abi, runner) as unknown as FunctionsConsumer;
  }
}
