/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockFunctionsOracle,
  MockFunctionsOracleInterface,
} from "../MockFunctionsOracle";

const _abi = [
  {
    inputs: [],
    name: "EmptyBillingRegistry",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyPublicKey",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyRequestData",
    type: "error",
  },
  {
    inputs: [],
    name: "InconsistentReportData",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedPublicKeyChange",
    type: "error",
  },
  {
    inputs: [],
    name: "BASE_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "node",
        type: "address",
      },
    ],
    name: "deleteNodePublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    name: "estimateCost",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllNodePublicKeys",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDONPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "subscriptionId",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "client",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "gasLimit",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256",
          },
        ],
        internalType: "struct FunctionsBillingRegistryInterface.RequestBilling",
        name: "billing",
        type: "tuple",
      },
    ],
    name: "getRequiredFee",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract FunctionsBillingRegistryInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "gasLimit",
        type: "uint32",
      },
    ],
    name: "sendRequest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setDONAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "setDONPublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "node",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "publicKey",
        type: "bytes",
      },
    ],
    name: "setNodePublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a57600080556106e690816100208239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816326ceabac146101a257816328242b04146103c0575080633d18651e1461039d57806353398987146102d25780635ab1bd53146102aa5780637b103999146102aa5780637f15e1661461023457806380756031146101f6578063a91ee0dc146101a7578063c3485468146101a2578063d227d24514610147578063d328a91e1461010c5763f1e14a21146100b257600080fd5b346101085760a03660031901126101085780359067ffffffffffffffff8211610104576100e1913691016105db565b50506080366023190112610100576020905167016345785d8a00008152f35b5080fd5b8380fd5b8280fd5b505034610100578160031936011261010057908161014392519161012f8361065c565b82525191829160208352602083019061061c565b0390f35b50913461019f57608036600319011261019f576101626105c4565b506024359067ffffffffffffffff821161019f5750602092610186913691016105db565b5050610190610609565b505167016345785d8a00008152f35b80fd5b6105a9565b833461019f57602036600319011261019f576001600160a01b036101c961058e565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015580f35b509034610108573660031901126101005761020f61058e565b506024359067ffffffffffffffff82116101085761022f913691016105db565b505080f35b509190346101005760203660031901126101005782359067ffffffffffffffff9081831161010457366023840112156101045782850135918211610297579061028b6024926020601f19601f85011601905161068e565b369201011161019f5780f35b602484604187634e487b7160e01b835252fd5b5050346101005781600319360112610100576020906001600160a01b03600154169051908152f35b82843461019f578060031936011261019f578151906102f08261065c565b8082528251906102ff8261065c565b80825283519284840194845280518095526060840194602080920190835b818110610380575050508385038185015282519081865280860181808460051b890101950193965b8388106103525786860387f35b9091929394838061036f600193601f19868203018752895161061c565b970193019701969093929193610345565b82516001600160a01b03168852968301969183019160010161031d565b5050346101005781600319360112610100576020905167016345785d8a00008152f35b84848434610108576060366003190112610108576103dc6105c4565b906024359467ffffffffffffffff9586811161058a576103ff90369084016105db565b9190610409610609565b936001600160a01b039485600154169384156105635750841561053c57875196608088018881108c821117610529578a93928c88938c938452168a5260209c8d998a8c01338152848d01928d63ffffffff8096168552606001953a8752519d8e9c8d9b8c9a7fa9d03c05000000000000000000000000000000000000000000000000000000008c528b0160a090528160a48c015260c48b013789888a0160c40152511660248801525116604486015251166064840152516084830152601f1990601f011681010360c401925af192831561051e5780936104ec575b505051908152f35b909192508382813d8311610517575b610505818361068e565b8101031261019f5750519083806104e4565b503d6104fb565b8251903d90823e3d90fd5b60248b604186634e487b7160e01b835252fd5b5086517ec1cfc0000000000000000000000000000000000000000000000000000000008152fd5b90507f9c5fe324000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b600435906001600160a01b03821682036105a457565b600080fd5b346105a45760203660031901126105a4576105c261058e565b005b6004359067ffffffffffffffff821682036105a457565b9181601f840112156105a45782359167ffffffffffffffff83116105a457602083818601950101116105a457565b6044359063ffffffff821682036105a457565b919082519283825260005b848110610648575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610627565b6020810190811067ffffffffffffffff82111761067857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106785760405256fea26469706673582212209fbe3ddfe08d28bf62ba1ae95387782a2d94690f5b53f9ce15ed938317ce937064736f6c63430008120033";

type MockFunctionsOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFunctionsOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFunctionsOracle__factory extends ContractFactory {
  constructor(...args: MockFunctionsOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockFunctionsOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockFunctionsOracle__factory {
    return super.connect(runner) as MockFunctionsOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFunctionsOracleInterface {
    return new Interface(_abi) as MockFunctionsOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockFunctionsOracle {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockFunctionsOracle;
  }
}
