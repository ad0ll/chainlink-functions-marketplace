/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockLinkToken, MockLinkTokenInterface } from "../MockLinkToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "decimalPlaces",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "decreaseApproval",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "increaseApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "totalTokensIssued",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "transferAndCall",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610461908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c806306fdde03146102cf578063095ea7b31461024457806318160ddd1461021e57806323b872dd146101f0578063313ce567146101d55780634000aea014610177578063661884631461014057806370a082311461014a57806395d89b4114610145578063a9059cbb14610140578063d73dd623146101215763dd62ed3e146100a357600080fd5b3461011d578060031936011261011d57806020926100bf610388565b6100fe61010c6100cd6103ab565b85519283918983019586906028926bffffffffffffffffffffffff19809260601b16835260601b1660148201520190565b03601f1981018352826103f3565b519020815280845220549051908152f35b5080fd5b503461011d5736600319011261013d57610139610388565b5080f35b80fd5b6103ce565b6102cf565b503461011d57602036600319011261011d57602090610167610388565b5051683635c9adc5dea000008152f35b503461011d57606036600319011261011d57610191610388565b5060443567ffffffffffffffff8082116101d157366023830112156101d15781600401359081116101d1573691016024011161011d576020905160018152f35b8380fd5b503461011d578160031936011261011d576020905160128152f35b503461011d57606036600319011261011d5760209061020d610388565b506102166103ab565b505160018152f35b503461011d578160031936011261011d57602090516b033b2e3c9fd0803ce80000008152f35b503461011d578060031936011261011d5761025d610388565b8151610294816100fe60208201943286906028926bffffffffffffffffffffffff19809260601b16835260601b1660148201520190565b51902082528160205280822080549060243582018092116102bb5760209350555160018152f35b602484634e487b7160e01b81526011600452fd5b346103835760008060031936011261013d576040805181810181811067ffffffffffffffff82111761036f578252600481526020907f4c4f4e4b000000000000000000000000000000000000000000000000000000008282015282519382859384528251928382860152825b84811061035957505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161033b565b602484634e487b7160e01b81526041600452fd5b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361038357565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361038357565b34610383576040366003190112610383576103e7610388565b50602060405160018152f35b90601f8019910116810190811067ffffffffffffffff82111761041557604052565b634e487b7160e01b600052604160045260246000fdfea26469706673582212207068b691aa627fda2d3b962e53cfffd415a7bffc1c5e1758bd269b9d7b87b18c64736f6c63430008120033";

type MockLinkTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLinkTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLinkToken__factory extends ContractFactory {
  constructor(...args: MockLinkTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockLinkToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockLinkToken__factory {
    return super.connect(runner) as MockLinkToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLinkTokenInterface {
    return new Interface(_abi) as MockLinkTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockLinkToken {
    return new Contract(address, _abi, runner) as unknown as MockLinkToken;
  }
}
