/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, ContractRunner } from "ethers";
import type {
  AuthorizedReceiver,
  AuthorizedReceiverInterface,
} from "../AuthorizedReceiver";

const _abi = [
  {
    inputs: [],
    name: "EmptySendersList",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAllowedToSetSenders",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedSender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "changedBy",
        type: "address",
      },
    ],
    name: "AuthorizedSendersChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "getAuthorizedSenders",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAuthorizedSender",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
    ],
    name: "setAuthorizedSenders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class AuthorizedReceiver__factory {
  static readonly abi = _abi;
  static createInterface(): AuthorizedReceiverInterface {
    return new Interface(_abi) as AuthorizedReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AuthorizedReceiver {
    return new Contract(address, _abi, runner) as unknown as AuthorizedReceiver;
  }
}
