/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Functions {
  export type RequestStruct = {
    codeLocation: BigNumberish;
    secretsLocation: BigNumberish;
    language: BigNumberish;
    source: string;
    secrets: BytesLike;
    args: string[];
  };

  export type RequestStructOutput = [
    codeLocation: bigint,
    secretsLocation: bigint,
    language: bigint,
    source: string,
    secrets: string,
    args: string[]
  ] & {
    codeLocation: bigint;
    secretsLocation: bigint;
    language: bigint;
    source: string;
    secrets: string;
    args: string[];
  };
}

export declare namespace FunctionsManager {
  export type FunctionMetadataStruct = {
    owner: AddressLike;
    subId: BigNumberish;
    name: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    request: Functions.RequestStruct;
    category: BytesLike;
    fee: BigNumberish;
    unlockedProfitPool: BigNumberish;
    lockedProfitPool: BigNumberish;
    functionsCalledCount: BigNumberish;
    totalFeesCollected: BigNumberish;
    successfulResponseCount: BigNumberish;
    failedResponseCount: BigNumberish;
  };

  export type FunctionMetadataStructOutput = [
    owner: string,
    subId: bigint,
    name: string,
    desc: string,
    imageUrl: string,
    expectedArgs: string[],
    request: Functions.RequestStructOutput,
    category: string,
    fee: bigint,
    unlockedProfitPool: bigint,
    lockedProfitPool: bigint,
    functionsCalledCount: bigint,
    totalFeesCollected: bigint,
    successfulResponseCount: bigint,
    failedResponseCount: bigint
  ] & {
    owner: string;
    subId: bigint;
    name: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    request: Functions.RequestStructOutput;
    category: string;
    fee: bigint;
    unlockedProfitPool: bigint;
    lockedProfitPool: bigint;
    functionsCalledCount: bigint;
    totalFeesCollected: bigint;
    successfulResponseCount: bigint;
    failedResponseCount: bigint;
  };

  export type FunctionResponseStruct = {
    functionId: BytesLike;
    caller: AddressLike;
    callbackFunction: BytesLike;
    gasDeposit: BigNumberish;
    response: BytesLike;
    err: BytesLike;
  };

  export type FunctionResponseStructOutput = [
    functionId: string,
    caller: string,
    callbackFunction: string,
    gasDeposit: bigint,
    response: string,
    err: string
  ] & {
    functionId: string;
    caller: string;
    callbackFunction: string;
    gasDeposit: bigint;
    response: string;
    err: string;
  };

  export type FunctionsRegisterRequestStruct = {
    fees: BigNumberish;
    functionName: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    codeLocation: BigNumberish;
    secretsLocation: BigNumberish;
    language: BigNumberish;
    category: BytesLike;
    subId: BigNumberish;
    source: string;
    secrets: BytesLike;
  };

  export type FunctionsRegisterRequestStructOutput = [
    fees: bigint,
    functionName: string,
    desc: string,
    imageUrl: string,
    expectedArgs: string[],
    codeLocation: bigint,
    secretsLocation: bigint,
    language: bigint,
    category: string,
    subId: bigint,
    source: string,
    secrets: string
  ] & {
    fees: bigint;
    functionName: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    codeLocation: bigint;
    secretsLocation: bigint;
    language: bigint;
    category: string;
    subId: bigint;
    source: string;
    secrets: string;
  };
}

export interface FunctionsManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "approveTokenSpender"
      | "authorMetadata"
      | "baseFee"
      | "categoryNames"
      | "estimateCost"
      | "executeRequest"
      | "feeManagerCut"
      | "forceUnlockFees"
      | "functionManagerProfitPool"
      | "functionMetadatas"
      | "functionResponses"
      | "functionsCalledCount"
      | "functionsRegisteredCount"
      | "getDONPublicKey"
      | "getFunctionMetadata"
      | "getFunctionResponse"
      | "getSubscriptionBalance"
      | "handleOracleFulfillment"
      | "minimumSubscriptionBalance"
      | "minimumSubscriptionDeposit"
      | "owner"
      | "refillSubscription"
      | "registerFunction"
      | "setBaseFee"
      | "setFeeManagerCut"
      | "setMinimumDeposit"
      | "subscriptionBalances"
      | "totalFeesCollected"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BaseFeeUpdated"
      | "FeeManagerCutUpdated"
      | "FulfillRequest"
      | "FunctionCallCompleted"
      | "FunctionCalled"
      | "FunctionRegistered"
      | "MinimumSubscriptionDepositUpdated"
      | "OCRResponse"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RequestFulfilled"
      | "RequestSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokenSpender",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "categoryNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [Functions.RequestStruct, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [BytesLike, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeManagerCut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceUnlockFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "functionManagerProfitPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "functionMetadatas",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "functionResponses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "functionsCalledCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "functionsRegisteredCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunctionMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFunctionResponse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSubscriptionBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSubscriptionDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refillSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFunction",
    values: [FunctionsManager.FunctionsRegisterRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManagerCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionBalances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokenSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoryNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeManagerCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceUnlockFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionManagerProfitPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionMetadatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionsCalledCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionsRegisteredCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFunctionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFunctionResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSubscriptionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSubscriptionDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refillSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManagerCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BaseFeeUpdatedEvent {
  export type InputTuple = [newBaseFee: BigNumberish];
  export type OutputTuple = [newBaseFee: bigint];
  export interface OutputObject {
    newBaseFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeManagerCutUpdatedEvent {
  export type InputTuple = [newFeeManagerCut: BigNumberish];
  export type OutputTuple = [newFeeManagerCut: bigint];
  export interface OutputObject {
    newFeeManagerCut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfillRequestEvent {
  export type InputTuple = [
    requestId: BytesLike,
    response: BytesLike,
    err: BytesLike
  ];
  export type OutputTuple = [requestId: string, response: string, err: string];
  export interface OutputObject {
    requestId: string;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunctionCallCompletedEvent {
  export type InputTuple = [
    functionId: BytesLike,
    requestId: BytesLike,
    caller: AddressLike,
    owner: AddressLike,
    callbackFunction: BytesLike,
    usedGas: BigNumberish,
    response: BytesLike,
    err: BytesLike
  ];
  export type OutputTuple = [
    functionId: string,
    requestId: string,
    caller: string,
    owner: string,
    callbackFunction: string,
    usedGas: bigint,
    response: string,
    err: string
  ];
  export interface OutputObject {
    functionId: string;
    requestId: string;
    caller: string;
    owner: string;
    callbackFunction: string;
    usedGas: bigint;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunctionCalledEvent {
  export type InputTuple = [
    functionId: BytesLike,
    requestId: BytesLike,
    caller: AddressLike,
    owner: AddressLike,
    callbackFunction: BytesLike,
    gasDeposit: BigNumberish,
    baseFee: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    functionId: string,
    requestId: string,
    caller: string,
    owner: string,
    callbackFunction: string,
    gasDeposit: bigint,
    baseFee: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    functionId: string;
    requestId: string;
    caller: string;
    owner: string;
    callbackFunction: string;
    gasDeposit: bigint;
    baseFee: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FunctionRegisteredEvent {
  export type InputTuple = [
    functionId: BytesLike,
    owner: AddressLike,
    category: BytesLike,
    metadata: FunctionsManager.FunctionMetadataStruct
  ];
  export type OutputTuple = [
    functionId: string,
    owner: string,
    category: string,
    metadata: FunctionsManager.FunctionMetadataStructOutput
  ];
  export interface OutputObject {
    functionId: string;
    owner: string;
    category: string;
    metadata: FunctionsManager.FunctionMetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumSubscriptionDepositUpdatedEvent {
  export type InputTuple = [newMinimumDeposit: BigNumberish];
  export type OutputTuple = [newMinimumDeposit: bigint];
  export interface OutputObject {
    newMinimumDeposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OCRResponseEvent {
  export type InputTuple = [
    requestId: BytesLike,
    result: BytesLike,
    err: BytesLike
  ];
  export type OutputTuple = [requestId: string, result: string, err: string];
  export interface OutputObject {
    requestId: string;
    result: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunctionsManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: FunctionsManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  approveTokenSpender: TypedContractMethod<
    [_spender: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorMetadata: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string] & {
        name: string;
        imageUrl: string;
        websiteUrl: string;
      }
    ],
    "view"
  >;

  baseFee: TypedContractMethod<[], [bigint], "view">;

  categoryNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  estimateCost: TypedContractMethod<
    [
      req: Functions.RequestStruct,
      subscriptionId: BigNumberish,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;

  executeRequest: TypedContractMethod<
    [functionId: BytesLike, args: string[], gasLimit: BigNumberish],
    [string],
    "nonpayable"
  >;

  feeManagerCut: TypedContractMethod<[], [bigint], "view">;

  forceUnlockFees: TypedContractMethod<
    [functionId: BytesLike],
    [void],
    "nonpayable"
  >;

  functionManagerProfitPool: TypedContractMethod<[], [bigint], "view">;

  functionMetadatas: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        bigint,
        string,
        string,
        string,
        Functions.RequestStructOutput,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        owner: string;
        subId: bigint;
        name: string;
        desc: string;
        imageUrl: string;
        request: Functions.RequestStructOutput;
        category: string;
        fee: bigint;
        unlockedProfitPool: bigint;
        lockedProfitPool: bigint;
        functionsCalledCount: bigint;
        totalFeesCollected: bigint;
        successfulResponseCount: bigint;
        failedResponseCount: bigint;
      }
    ],
    "view"
  >;

  functionResponses: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, string] & {
        functionId: string;
        caller: string;
        callbackFunction: string;
        gasDeposit: bigint;
        response: string;
        err: string;
      }
    ],
    "view"
  >;

  functionsCalledCount: TypedContractMethod<[], [bigint], "view">;

  functionsRegisteredCount: TypedContractMethod<[], [bigint], "view">;

  getDONPublicKey: TypedContractMethod<[], [string], "view">;

  getFunctionMetadata: TypedContractMethod<
    [_functionId: BytesLike],
    [FunctionsManager.FunctionMetadataStructOutput],
    "view"
  >;

  getFunctionResponse: TypedContractMethod<
    [_requestId: BytesLike],
    [FunctionsManager.FunctionResponseStructOutput],
    "view"
  >;

  getSubscriptionBalance: TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [bigint],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  minimumSubscriptionBalance: TypedContractMethod<[], [bigint], "view">;

  minimumSubscriptionDeposit: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  refillSubscription: TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerFunction: TypedContractMethod<
    [request: FunctionsManager.FunctionsRegisterRequestStruct],
    [string],
    "payable"
  >;

  setBaseFee: TypedContractMethod<
    [_baseFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeManagerCut: TypedContractMethod<
    [_feeManagerCut: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumDeposit: TypedContractMethod<
    [_minimumDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  subscriptionBalances: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  totalFeesCollected: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveTokenSpender"
  ): TypedContractMethod<
    [_spender: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorMetadata"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string] & {
        name: string;
        imageUrl: string;
        websiteUrl: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "baseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "categoryNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "estimateCost"
  ): TypedContractMethod<
    [
      req: Functions.RequestStruct,
      subscriptionId: BigNumberish,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeRequest"
  ): TypedContractMethod<
    [functionId: BytesLike, args: string[], gasLimit: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeManagerCut"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceUnlockFees"
  ): TypedContractMethod<[functionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "functionManagerProfitPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "functionMetadatas"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        bigint,
        string,
        string,
        string,
        Functions.RequestStructOutput,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        owner: string;
        subId: bigint;
        name: string;
        desc: string;
        imageUrl: string;
        request: Functions.RequestStructOutput;
        category: string;
        fee: bigint;
        unlockedProfitPool: bigint;
        lockedProfitPool: bigint;
        functionsCalledCount: bigint;
        totalFeesCollected: bigint;
        successfulResponseCount: bigint;
        failedResponseCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "functionResponses"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, string] & {
        functionId: string;
        caller: string;
        callbackFunction: string;
        gasDeposit: bigint;
        response: string;
        err: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "functionsCalledCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "functionsRegisteredCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDONPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFunctionMetadata"
  ): TypedContractMethod<
    [_functionId: BytesLike],
    [FunctionsManager.FunctionMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFunctionResponse"
  ): TypedContractMethod<
    [_requestId: BytesLike],
    [FunctionsManager.FunctionResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscriptionBalance"
  ): TypedContractMethod<[_subscriptionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minimumSubscriptionBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumSubscriptionDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refillSubscription"
  ): TypedContractMethod<[_subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerFunction"
  ): TypedContractMethod<
    [request: FunctionsManager.FunctionsRegisterRequestStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setBaseFee"
  ): TypedContractMethod<[_baseFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeManagerCut"
  ): TypedContractMethod<[_feeManagerCut: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumDeposit"
  ): TypedContractMethod<[_minimumDeposit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionBalances"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeesCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BaseFeeUpdated"
  ): TypedContractEvent<
    BaseFeeUpdatedEvent.InputTuple,
    BaseFeeUpdatedEvent.OutputTuple,
    BaseFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeManagerCutUpdated"
  ): TypedContractEvent<
    FeeManagerCutUpdatedEvent.InputTuple,
    FeeManagerCutUpdatedEvent.OutputTuple,
    FeeManagerCutUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FulfillRequest"
  ): TypedContractEvent<
    FulfillRequestEvent.InputTuple,
    FulfillRequestEvent.OutputTuple,
    FulfillRequestEvent.OutputObject
  >;
  getEvent(
    key: "FunctionCallCompleted"
  ): TypedContractEvent<
    FunctionCallCompletedEvent.InputTuple,
    FunctionCallCompletedEvent.OutputTuple,
    FunctionCallCompletedEvent.OutputObject
  >;
  getEvent(
    key: "FunctionCalled"
  ): TypedContractEvent<
    FunctionCalledEvent.InputTuple,
    FunctionCalledEvent.OutputTuple,
    FunctionCalledEvent.OutputObject
  >;
  getEvent(
    key: "FunctionRegistered"
  ): TypedContractEvent<
    FunctionRegisteredEvent.InputTuple,
    FunctionRegisteredEvent.OutputTuple,
    FunctionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MinimumSubscriptionDepositUpdated"
  ): TypedContractEvent<
    MinimumSubscriptionDepositUpdatedEvent.InputTuple,
    MinimumSubscriptionDepositUpdatedEvent.OutputTuple,
    MinimumSubscriptionDepositUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OCRResponse"
  ): TypedContractEvent<
    OCRResponseEvent.InputTuple,
    OCRResponseEvent.OutputTuple,
    OCRResponseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;

  filters: {
    "BaseFeeUpdated(uint256)": TypedContractEvent<
      BaseFeeUpdatedEvent.InputTuple,
      BaseFeeUpdatedEvent.OutputTuple,
      BaseFeeUpdatedEvent.OutputObject
    >;
    BaseFeeUpdated: TypedContractEvent<
      BaseFeeUpdatedEvent.InputTuple,
      BaseFeeUpdatedEvent.OutputTuple,
      BaseFeeUpdatedEvent.OutputObject
    >;

    "FeeManagerCutUpdated(uint256)": TypedContractEvent<
      FeeManagerCutUpdatedEvent.InputTuple,
      FeeManagerCutUpdatedEvent.OutputTuple,
      FeeManagerCutUpdatedEvent.OutputObject
    >;
    FeeManagerCutUpdated: TypedContractEvent<
      FeeManagerCutUpdatedEvent.InputTuple,
      FeeManagerCutUpdatedEvent.OutputTuple,
      FeeManagerCutUpdatedEvent.OutputObject
    >;

    "FulfillRequest(bytes32,bytes,bytes)": TypedContractEvent<
      FulfillRequestEvent.InputTuple,
      FulfillRequestEvent.OutputTuple,
      FulfillRequestEvent.OutputObject
    >;
    FulfillRequest: TypedContractEvent<
      FulfillRequestEvent.InputTuple,
      FulfillRequestEvent.OutputTuple,
      FulfillRequestEvent.OutputObject
    >;

    "FunctionCallCompleted(bytes32,bytes32,address,address,bytes32,uint256,bytes,bytes)": TypedContractEvent<
      FunctionCallCompletedEvent.InputTuple,
      FunctionCallCompletedEvent.OutputTuple,
      FunctionCallCompletedEvent.OutputObject
    >;
    FunctionCallCompleted: TypedContractEvent<
      FunctionCallCompletedEvent.InputTuple,
      FunctionCallCompletedEvent.OutputTuple,
      FunctionCallCompletedEvent.OutputObject
    >;

    "FunctionCalled(bytes32,bytes32,address,address,bytes32,uint256,uint96,uint96)": TypedContractEvent<
      FunctionCalledEvent.InputTuple,
      FunctionCalledEvent.OutputTuple,
      FunctionCalledEvent.OutputObject
    >;
    FunctionCalled: TypedContractEvent<
      FunctionCalledEvent.InputTuple,
      FunctionCalledEvent.OutputTuple,
      FunctionCalledEvent.OutputObject
    >;

    "FunctionRegistered(bytes32,address,bytes32,tuple)": TypedContractEvent<
      FunctionRegisteredEvent.InputTuple,
      FunctionRegisteredEvent.OutputTuple,
      FunctionRegisteredEvent.OutputObject
    >;
    FunctionRegistered: TypedContractEvent<
      FunctionRegisteredEvent.InputTuple,
      FunctionRegisteredEvent.OutputTuple,
      FunctionRegisteredEvent.OutputObject
    >;

    "MinimumSubscriptionDepositUpdated(uint256)": TypedContractEvent<
      MinimumSubscriptionDepositUpdatedEvent.InputTuple,
      MinimumSubscriptionDepositUpdatedEvent.OutputTuple,
      MinimumSubscriptionDepositUpdatedEvent.OutputObject
    >;
    MinimumSubscriptionDepositUpdated: TypedContractEvent<
      MinimumSubscriptionDepositUpdatedEvent.InputTuple,
      MinimumSubscriptionDepositUpdatedEvent.OutputTuple,
      MinimumSubscriptionDepositUpdatedEvent.OutputObject
    >;

    "OCRResponse(bytes32,bytes,bytes)": TypedContractEvent<
      OCRResponseEvent.InputTuple,
      OCRResponseEvent.OutputTuple,
      OCRResponseEvent.OutputObject
    >;
    OCRResponse: TypedContractEvent<
      OCRResponseEvent.InputTuple,
      OCRResponseEvent.OutputTuple,
      OCRResponseEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
  };
}
