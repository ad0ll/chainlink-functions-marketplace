/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsManagerInterface {
  export type FunctionsRegisterRequestStruct = {
    fees: BigNumberish;
    functionName: string;
    desc: string;
    imageUrl: string;
    source: string;
    expectedArgs: string[];
    codeLocation: BigNumberish;
    secretsLocation: BigNumberish;
    language: BigNumberish;
    category: BytesLike;
    subId: BigNumberish;
    expectedReturnType: BigNumberish;
    secrets: BytesLike;
  };

  export type FunctionsRegisterRequestStructOutput = [
    fees: bigint,
    functionName: string,
    desc: string,
    imageUrl: string,
    source: string,
    expectedArgs: string[],
    codeLocation: bigint,
    secretsLocation: bigint,
    language: bigint,
    category: string,
    subId: bigint,
    expectedReturnType: bigint,
    secrets: string
  ] & {
    fees: bigint;
    functionName: string;
    desc: string;
    imageUrl: string;
    source: string;
    expectedArgs: string[];
    codeLocation: bigint;
    secretsLocation: bigint;
    language: bigint;
    category: string;
    subId: bigint;
    expectedReturnType: bigint;
    secrets: string;
  };
}

export interface FunctionsManagerInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeRequest"
      | "getDONPublicKey"
      | "handleOracleFulfillment"
      | "refillSubscription"
      | "registerFunction"
      | "withdrawFunctionProfitToAuthor"
      | "withdrawFunctionsManagerProfitToOwner"
      | "withdrawMultipleFunctionProfitToAuthor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refillSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFunction",
    values: [FunctionsManagerInterface.FunctionsRegisterRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunctionProfitToAuthor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunctionsManagerProfitToOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMultipleFunctionProfitToAuthor",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refillSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunctionProfitToAuthor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunctionsManagerProfitToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMultipleFunctionProfitToAuthor",
    data: BytesLike
  ): Result;
}

export interface FunctionsManagerInterface extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: FunctionsManagerInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeRequest: TypedContractMethod<
    [functionId: BytesLike, args: string[]],
    [string],
    "nonpayable"
  >;

  getDONPublicKey: TypedContractMethod<[], [string], "view">;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  refillSubscription: TypedContractMethod<
    [_subscriptionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerFunction: TypedContractMethod<
    [request: FunctionsManagerInterface.FunctionsRegisterRequestStruct],
    [string],
    "payable"
  >;

  withdrawFunctionProfitToAuthor: TypedContractMethod<
    [functionId: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFunctionsManagerProfitToOwner: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  withdrawMultipleFunctionProfitToAuthor: TypedContractMethod<
    [functionIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeRequest"
  ): TypedContractMethod<
    [functionId: BytesLike, args: string[]],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDONPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refillSubscription"
  ): TypedContractMethod<[_subscriptionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerFunction"
  ): TypedContractMethod<
    [request: FunctionsManagerInterface.FunctionsRegisterRequestStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunctionProfitToAuthor"
  ): TypedContractMethod<[functionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunctionsManagerProfitToOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawMultipleFunctionProfitToAuthor"
  ): TypedContractMethod<[functionIds: BytesLike[]], [void], "nonpayable">;

  filters: {};
}
