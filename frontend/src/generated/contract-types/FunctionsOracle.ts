/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FunctionsBillingRegistryInterface {
  export type RequestBillingStruct = {
    subscriptionId: BigNumberish;
    client: AddressLike;
    gasLimit: BigNumberish;
    gasPrice: BigNumberish;
  };

  export type RequestBillingStructOutput = [
    subscriptionId: bigint,
    client: string,
    gasLimit: bigint,
    gasPrice: bigint
  ] & {
    subscriptionId: bigint;
    client: string;
    gasLimit: bigint;
    gasPrice: bigint;
  };
}

export interface FunctionsOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "activateAuthorizedReceiver"
      | "addAuthorizedSenders"
      | "authorizedReceiverActive"
      | "deactivateAuthorizedReceiver"
      | "deleteNodePublicKey"
      | "estimateCost"
      | "getAllNodePublicKeys"
      | "getAuthorizedSenders"
      | "getDONPublicKey"
      | "getRegistry"
      | "getRequiredFee"
      | "initialize"
      | "isAuthorizedSender"
      | "latestConfigDetails"
      | "latestConfigDigestAndEpoch"
      | "owner"
      | "removeAuthorizedSenders"
      | "sendRequest"
      | "setConfig"
      | "setDONPublicKey"
      | "setNodePublicKey"
      | "setRegistry"
      | "transferOwnership"
      | "transmit"
      | "transmitters"
      | "typeAndVersion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedSendersActive"
      | "AuthorizedSendersChanged"
      | "AuthorizedSendersDeactive"
      | "ConfigSet"
      | "Initialized"
      | "InvalidRequestID"
      | "OracleRequest"
      | "OracleResponse"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "Transmitted"
      | "UserCallbackError"
      | "UserCallbackRawError"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateAuthorizedReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedSenders",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedReceiverActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAuthorizedReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteNodePublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodePublicKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredFee",
    values: [BytesLike, FunctionsBillingRegistryInterface.RequestBillingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDigestAndEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedSenders",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      AddressLike[],
      AddressLike[],
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDONPublicKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodePublicKey",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transmit",
    values: [
      [BytesLike, BytesLike, BytesLike],
      BytesLike,
      BytesLike[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateAuthorizedReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedReceiverActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAuthorizedReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteNodePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodePublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDigestAndEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedSendersActiveEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedSendersChangedEvent {
  export type InputTuple = [senders: AddressLike[], changedBy: AddressLike];
  export type OutputTuple = [senders: string[], changedBy: string];
  export interface OutputObject {
    senders: string[];
    changedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedSendersDeactiveEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    previousConfigBlockNumber: BigNumberish,
    configDigest: BytesLike,
    configCount: BigNumberish,
    signers: AddressLike[],
    transmitters: AddressLike[],
    f: BigNumberish,
    onchainConfig: BytesLike,
    offchainConfigVersion: BigNumberish,
    offchainConfig: BytesLike
  ];
  export type OutputTuple = [
    previousConfigBlockNumber: bigint,
    configDigest: string,
    configCount: bigint,
    signers: string[],
    transmitters: string[],
    f: bigint,
    onchainConfig: string,
    offchainConfigVersion: bigint,
    offchainConfig: string
  ];
  export interface OutputObject {
    previousConfigBlockNumber: bigint;
    configDigest: string;
    configCount: bigint;
    signers: string[];
    transmitters: string[];
    f: bigint;
    onchainConfig: string;
    offchainConfigVersion: bigint;
    offchainConfig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvalidRequestIDEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRequestEvent {
  export type InputTuple = [
    requestId: BytesLike,
    requestingContract: AddressLike,
    requestInitiator: AddressLike,
    subscriptionId: BigNumberish,
    subscriptionOwner: AddressLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    requestingContract: string,
    requestInitiator: string,
    subscriptionId: bigint,
    subscriptionOwner: string,
    data: string
  ];
  export interface OutputObject {
    requestId: string;
    requestingContract: string;
    requestInitiator: string;
    subscriptionId: bigint;
    subscriptionOwner: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleResponseEvent {
  export type InputTuple = [requestId: BytesLike];
  export type OutputTuple = [requestId: string];
  export interface OutputObject {
    requestId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransmittedEvent {
  export type InputTuple = [configDigest: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [configDigest: string, epoch: bigint];
  export interface OutputObject {
    configDigest: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserCallbackErrorEvent {
  export type InputTuple = [requestId: BytesLike, reason: string];
  export type OutputTuple = [requestId: string, reason: string];
  export interface OutputObject {
    requestId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserCallbackRawErrorEvent {
  export type InputTuple = [requestId: BytesLike, lowLevelData: BytesLike];
  export type OutputTuple = [requestId: string, lowLevelData: string];
  export interface OutputObject {
    requestId: string;
    lowLevelData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunctionsOracle extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: FunctionsOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activateAuthorizedReceiver: TypedContractMethod<[], [void], "nonpayable">;

  addAuthorizedSenders: TypedContractMethod<
    [senders: AddressLike[]],
    [void],
    "nonpayable"
  >;

  authorizedReceiverActive: TypedContractMethod<[], [boolean], "view">;

  deactivateAuthorizedReceiver: TypedContractMethod<[], [void], "nonpayable">;

  deleteNodePublicKey: TypedContractMethod<
    [node: AddressLike],
    [void],
    "nonpayable"
  >;

  estimateCost: TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAllNodePublicKeys: TypedContractMethod<[], [[string[], string[]]], "view">;

  getAuthorizedSenders: TypedContractMethod<[], [string[]], "view">;

  getDONPublicKey: TypedContractMethod<[], [string], "view">;

  getRegistry: TypedContractMethod<[], [string], "view">;

  getRequiredFee: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isAuthorizedSender: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "view"
  >;

  latestConfigDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;

  latestConfigDigestAndEpoch: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeAuthorizedSenders: TypedContractMethod<
    [senders: AddressLike[]],
    [void],
    "nonpayable"
  >;

  sendRequest: TypedContractMethod<
    [subscriptionId: BigNumberish, data: BytesLike, gasLimit: BigNumberish],
    [string],
    "nonpayable"
  >;

  setConfig: TypedContractMethod<
    [
      _signers: AddressLike[],
      _transmitters: AddressLike[],
      _f: BigNumberish,
      _onchainConfig: BytesLike,
      _offchainConfigVersion: BigNumberish,
      _offchainConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setDONPublicKey: TypedContractMethod<
    [donPublicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  setNodePublicKey: TypedContractMethod<
    [node: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  setRegistry: TypedContractMethod<
    [registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  transmit: TypedContractMethod<
    [
      reportContext: [BytesLike, BytesLike, BytesLike],
      report: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      rawVs: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transmitters: TypedContractMethod<[], [string[]], "view">;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateAuthorizedReceiver"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAuthorizedSenders"
  ): TypedContractMethod<[senders: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedReceiverActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateAuthorizedReceiver"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteNodePublicKey"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateCost"
  ): TypedContractMethod<
    [
      subscriptionId: BigNumberish,
      data: BytesLike,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllNodePublicKeys"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "getAuthorizedSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDONPublicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredFee"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthorizedSender"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "latestConfigDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestConfigDigestAndEpoch"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAuthorizedSenders"
  ): TypedContractMethod<[senders: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, data: BytesLike, gasLimit: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _signers: AddressLike[],
      _transmitters: AddressLike[],
      _f: BigNumberish,
      _onchainConfig: BytesLike,
      _offchainConfigVersion: BigNumberish,
      _offchainConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDONPublicKey"
  ): TypedContractMethod<[donPublicKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNodePublicKey"
  ): TypedContractMethod<
    [node: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRegistry"
  ): TypedContractMethod<[registryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transmit"
  ): TypedContractMethod<
    [
      reportContext: [BytesLike, BytesLike, BytesLike],
      report: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      rawVs: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transmitters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AuthorizedSendersActive"
  ): TypedContractEvent<
    AuthorizedSendersActiveEvent.InputTuple,
    AuthorizedSendersActiveEvent.OutputTuple,
    AuthorizedSendersActiveEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedSendersChanged"
  ): TypedContractEvent<
    AuthorizedSendersChangedEvent.InputTuple,
    AuthorizedSendersChangedEvent.OutputTuple,
    AuthorizedSendersChangedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedSendersDeactive"
  ): TypedContractEvent<
    AuthorizedSendersDeactiveEvent.InputTuple,
    AuthorizedSendersDeactiveEvent.OutputTuple,
    AuthorizedSendersDeactiveEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InvalidRequestID"
  ): TypedContractEvent<
    InvalidRequestIDEvent.InputTuple,
    InvalidRequestIDEvent.OutputTuple,
    InvalidRequestIDEvent.OutputObject
  >;
  getEvent(
    key: "OracleRequest"
  ): TypedContractEvent<
    OracleRequestEvent.InputTuple,
    OracleRequestEvent.OutputTuple,
    OracleRequestEvent.OutputObject
  >;
  getEvent(
    key: "OracleResponse"
  ): TypedContractEvent<
    OracleResponseEvent.InputTuple,
    OracleResponseEvent.OutputTuple,
    OracleResponseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transmitted"
  ): TypedContractEvent<
    TransmittedEvent.InputTuple,
    TransmittedEvent.OutputTuple,
    TransmittedEvent.OutputObject
  >;
  getEvent(
    key: "UserCallbackError"
  ): TypedContractEvent<
    UserCallbackErrorEvent.InputTuple,
    UserCallbackErrorEvent.OutputTuple,
    UserCallbackErrorEvent.OutputObject
  >;
  getEvent(
    key: "UserCallbackRawError"
  ): TypedContractEvent<
    UserCallbackRawErrorEvent.InputTuple,
    UserCallbackRawErrorEvent.OutputTuple,
    UserCallbackRawErrorEvent.OutputObject
  >;

  filters: {
    "AuthorizedSendersActive(address)": TypedContractEvent<
      AuthorizedSendersActiveEvent.InputTuple,
      AuthorizedSendersActiveEvent.OutputTuple,
      AuthorizedSendersActiveEvent.OutputObject
    >;
    AuthorizedSendersActive: TypedContractEvent<
      AuthorizedSendersActiveEvent.InputTuple,
      AuthorizedSendersActiveEvent.OutputTuple,
      AuthorizedSendersActiveEvent.OutputObject
    >;

    "AuthorizedSendersChanged(address[],address)": TypedContractEvent<
      AuthorizedSendersChangedEvent.InputTuple,
      AuthorizedSendersChangedEvent.OutputTuple,
      AuthorizedSendersChangedEvent.OutputObject
    >;
    AuthorizedSendersChanged: TypedContractEvent<
      AuthorizedSendersChangedEvent.InputTuple,
      AuthorizedSendersChangedEvent.OutputTuple,
      AuthorizedSendersChangedEvent.OutputObject
    >;

    "AuthorizedSendersDeactive(address)": TypedContractEvent<
      AuthorizedSendersDeactiveEvent.InputTuple,
      AuthorizedSendersDeactiveEvent.OutputTuple,
      AuthorizedSendersDeactiveEvent.OutputObject
    >;
    AuthorizedSendersDeactive: TypedContractEvent<
      AuthorizedSendersDeactiveEvent.InputTuple,
      AuthorizedSendersDeactiveEvent.OutputTuple,
      AuthorizedSendersDeactiveEvent.OutputObject
    >;

    "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InvalidRequestID(bytes32)": TypedContractEvent<
      InvalidRequestIDEvent.InputTuple,
      InvalidRequestIDEvent.OutputTuple,
      InvalidRequestIDEvent.OutputObject
    >;
    InvalidRequestID: TypedContractEvent<
      InvalidRequestIDEvent.InputTuple,
      InvalidRequestIDEvent.OutputTuple,
      InvalidRequestIDEvent.OutputObject
    >;

    "OracleRequest(bytes32,address,address,uint64,address,bytes)": TypedContractEvent<
      OracleRequestEvent.InputTuple,
      OracleRequestEvent.OutputTuple,
      OracleRequestEvent.OutputObject
    >;
    OracleRequest: TypedContractEvent<
      OracleRequestEvent.InputTuple,
      OracleRequestEvent.OutputTuple,
      OracleRequestEvent.OutputObject
    >;

    "OracleResponse(bytes32)": TypedContractEvent<
      OracleResponseEvent.InputTuple,
      OracleResponseEvent.OutputTuple,
      OracleResponseEvent.OutputObject
    >;
    OracleResponse: TypedContractEvent<
      OracleResponseEvent.InputTuple,
      OracleResponseEvent.OutputTuple,
      OracleResponseEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transmitted(bytes32,uint32)": TypedContractEvent<
      TransmittedEvent.InputTuple,
      TransmittedEvent.OutputTuple,
      TransmittedEvent.OutputObject
    >;
    Transmitted: TypedContractEvent<
      TransmittedEvent.InputTuple,
      TransmittedEvent.OutputTuple,
      TransmittedEvent.OutputObject
    >;

    "UserCallbackError(bytes32,string)": TypedContractEvent<
      UserCallbackErrorEvent.InputTuple,
      UserCallbackErrorEvent.OutputTuple,
      UserCallbackErrorEvent.OutputObject
    >;
    UserCallbackError: TypedContractEvent<
      UserCallbackErrorEvent.InputTuple,
      UserCallbackErrorEvent.OutputTuple,
      UserCallbackErrorEvent.OutputObject
    >;

    "UserCallbackRawError(bytes32,bytes)": TypedContractEvent<
      UserCallbackRawErrorEvent.InputTuple,
      UserCallbackRawErrorEvent.OutputTuple,
      UserCallbackRawErrorEvent.OutputObject
    >;
    UserCallbackRawError: TypedContractEvent<
      UserCallbackRawErrorEvent.InputTuple,
      UserCallbackRawErrorEvent.OutputTuple,
      UserCallbackRawErrorEvent.OutputObject
    >;
  };
}
