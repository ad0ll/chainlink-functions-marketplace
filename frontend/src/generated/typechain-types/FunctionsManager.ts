/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {EventFragment, FunctionFragment, Result,} from "@ethersproject/abi";
import type {Listener, Provider} from "@ethersproject/providers";
import type {OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener,} from "../common";

export declare namespace Functions {
    export type RequestStruct = {
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
        args: PromiseOrValue<string>[];
    };

    export type RequestStructOutput = [
        number,
        number,
        number,
        string,
        string,
        string[]
    ] & {
        codeLocation: number;
        secretsLocation: number;
        language: number;
        source: string;
        secrets: string;
        args: string[];
    };
}

export declare namespace FunctionsManager {
    export type FunctionMetadataStruct = {
        fee: PromiseOrValue<BigNumberish>;
        owner: PromiseOrValue<string>;
        subId: PromiseOrValue<BigNumberish>;
        name: PromiseOrValue<string>;
        desc: PromiseOrValue<string>;
        imageUrl: PromiseOrValue<string>;
        expectedArgs: PromiseOrValue<string>[];
        request: Functions.RequestStruct;
        category: PromiseOrValue<BytesLike>;
        subscriptionPool: PromiseOrValue<BigNumberish>;
        unlockedProfitPool: PromiseOrValue<BigNumberish>;
        lockedProfitPool: PromiseOrValue<BigNumberish>;
    };

    export type FunctionMetadataStructOutput = [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        string,
        string[],
        Functions.RequestStructOutput,
        string,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        fee: BigNumber;
        owner: string;
        subId: BigNumber;
        name: string;
        desc: string;
        imageUrl: string;
        expectedArgs: string[];
        request: Functions.RequestStructOutput;
        category: string;
        subscriptionPool: BigNumber;
        unlockedProfitPool: BigNumber;
        lockedProfitPool: BigNumber;
    };

    export type FunctionResponseStruct = {
        functionId: PromiseOrValue<BytesLike>;
        caller: PromiseOrValue<string>;
        callbackFunction: PromiseOrValue<BytesLike>;
        gasDeposit: PromiseOrValue<BigNumberish>;
        response: PromiseOrValue<BytesLike>;
        err: PromiseOrValue<BytesLike>;
    };

    export type FunctionResponseStructOutput = [
        string,
        string,
        string,
        BigNumber,
        string,
        string
    ] & {
        functionId: string;
        caller: string;
        callbackFunction: string;
        gasDeposit: BigNumber;
        response: string;
        err: string;
    };

    export type FunctionsRegisterRequestStruct = {
        fees: PromiseOrValue<BigNumberish>;
        functionName: PromiseOrValue<string>;
        desc: PromiseOrValue<string>;
        imageUrl: PromiseOrValue<string>;
        expectedArgs: PromiseOrValue<string>[];
        codeLocation: PromiseOrValue<BigNumberish>;
        secretsLocation: PromiseOrValue<BigNumberish>;
        language: PromiseOrValue<BigNumberish>;
        category: PromiseOrValue<BytesLike>;
        subId: PromiseOrValue<BigNumberish>;
        source: PromiseOrValue<string>;
        secrets: PromiseOrValue<BytesLike>;
    };

    export type FunctionsRegisterRequestStructOutput = [
        BigNumber,
        string,
        string,
        string,
        string[],
        number,
        number,
        number,
        string,
        BigNumber,
        string,
        string
    ] & {
        fees: BigNumber;
        functionName: string;
        desc: string;
        imageUrl: string;
        expectedArgs: string[];
        codeLocation: number;
        secretsLocation: number;
        language: number;
        category: string;
        subId: BigNumber;
        source: string;
        secrets: string;
    };
}

export interface FunctionsManagerInterface extends utils.Interface {
    functions: {
        "acceptOwnership()": FunctionFragment;
        "authorMetadata(address)": FunctionFragment;
        "baseFee()": FunctionFragment;
        "categoryNames(uint64)": FunctionFragment;
        "dummyFullfill(bytes32,bytes,bytes)": FunctionFragment;
        "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": FunctionFragment;
        "executeRequest(bytes32,uint32,bool)": FunctionFragment;
        "feeManagerCut()": FunctionFragment;
        "forceUnlockFees(bytes32)": FunctionFragment;
        "functionManagerProfitPool()": FunctionFragment;
        "functionMetadatas(bytes32)": FunctionFragment;
        "functionResponses(bytes32)": FunctionFragment;
        "getDONPublicKey()": FunctionFragment;
        "getFunction(bytes32)": FunctionFragment;
        "getFunctionResponse(bytes32)": FunctionFragment;
        "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
        "minimumSubscriptionDeposit()": FunctionFragment;
        "moveSubscriptionToUnlock(bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "registerFunction((uint256,string,string,string,string[],uint8,uint8,uint8,bytes32,uint64,string,bytes))": FunctionFragment;
        "setBaseFee(uint256)": FunctionFragment;
        "setFeeManagerCut(uint32)": FunctionFragment;
        "setMinimumDeposit(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    events: {
        "BaseFeeUpdated(uint256)": EventFragment;
        "FeeManagerCutUpdated(uint256)": EventFragment;
        "FulfillRequest(bytes32,bytes,bytes)": EventFragment;
        "FunctionCallCompleted(bytes32,bytes32,address,address,bytes32,uint256,bytes,bytes)": EventFragment;
        "FunctionCalled(bytes32,bytes32,address,address,bytes32,uint256,uint256,uint256)": EventFragment;
        "FunctionRegistered(bytes32,address,bytes32,tuple)": EventFragment;
        "MinimumSubscriptionDepositUpdated(uint256)": EventFragment;
        "OCRResponse(bytes32,bytes,bytes)": EventFragment;
        "OwnershipTransferRequested(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RequestFulfilled(bytes32)": EventFragment;
        "RequestSent(bytes32)": EventFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "acceptOwnership"
            | "authorMetadata"
            | "baseFee"
            | "categoryNames"
            | "dummyFullfill"
            | "estimateCost"
            | "executeRequest"
            | "feeManagerCut"
            | "forceUnlockFees"
            | "functionManagerProfitPool"
            | "functionMetadatas"
            | "functionResponses"
            | "getDONPublicKey"
            | "getFunction"
            | "getFunctionResponse"
            | "handleOracleFulfillment"
            | "minimumSubscriptionDeposit"
            | "moveSubscriptionToUnlock"
            | "owner"
            | "registerFunction"
            | "setBaseFee"
            | "setFeeManagerCut"
            | "setMinimumDeposit"
            | "transferOwnership"
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "acceptOwnership",
        values?: undefined
    ): string;

    encodeFunctionData(
        functionFragment: "authorMetadata",
        values: [PromiseOrValue<string>]
    ): string;

    encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;

    encodeFunctionData(
        functionFragment: "categoryNames",
        values: [PromiseOrValue<BigNumberish>]
    ): string;

    encodeFunctionData(
        functionFragment: "dummyFullfill",
        values: [
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>
        ]
    ): string;

    encodeFunctionData(
        functionFragment: "estimateCost",
        values: [
            Functions.RequestStruct,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string;

    encodeFunctionData(
        functionFragment: "executeRequest",
        values: [
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<boolean>
        ]
    ): string;

    encodeFunctionData(
        functionFragment: "feeManagerCut",
        values?: undefined
    ): string;

    encodeFunctionData(
        functionFragment: "forceUnlockFees",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    encodeFunctionData(
        functionFragment: "functionManagerProfitPool",
        values?: undefined
    ): string;

    encodeFunctionData(
        functionFragment: "functionMetadatas",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    encodeFunctionData(
        functionFragment: "functionResponses",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    encodeFunctionData(
        functionFragment: "getDONPublicKey",
        values?: undefined
    ): string;

    encodeFunctionData(
        functionFragment: "getFunction",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    encodeFunctionData(
        functionFragment: "getFunctionResponse",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    encodeFunctionData(
        functionFragment: "handleOracleFulfillment",
        values: [
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>
        ]
    ): string;

    encodeFunctionData(
        functionFragment: "minimumSubscriptionDeposit",
        values?: undefined
    ): string;

    encodeFunctionData(
        functionFragment: "moveSubscriptionToUnlock",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    encodeFunctionData(functionFragment: "owner", values?: undefined): string;

    encodeFunctionData(
        functionFragment: "registerFunction",
        values: [FunctionsManager.FunctionsRegisterRequestStruct]
    ): string;

    encodeFunctionData(
        functionFragment: "setBaseFee",
        values: [PromiseOrValue<BigNumberish>]
    ): string;

    encodeFunctionData(
        functionFragment: "setFeeManagerCut",
        values: [PromiseOrValue<BigNumberish>]
    ): string;

    encodeFunctionData(
        functionFragment: "setMinimumDeposit",
        values: [PromiseOrValue<BigNumberish>]
    ): string;

    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [PromiseOrValue<string>]
    ): string;

    decodeFunctionResult(
        functionFragment: "acceptOwnership",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "authorMetadata",
        data: BytesLike
    ): Result;

    decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;

    decodeFunctionResult(
        functionFragment: "categoryNames",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "dummyFullfill",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "estimateCost",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "executeRequest",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "feeManagerCut",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "forceUnlockFees",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "functionManagerProfitPool",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "functionMetadatas",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "functionResponses",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "getDONPublicKey",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "getFunction",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "getFunctionResponse",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "handleOracleFulfillment",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "minimumSubscriptionDeposit",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "moveSubscriptionToUnlock",
        data: BytesLike
    ): Result;

    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

    decodeFunctionResult(
        functionFragment: "registerFunction",
        data: BytesLike
    ): Result;

    decodeFunctionResult(functionFragment: "setBaseFee", data: BytesLike): Result;

    decodeFunctionResult(
        functionFragment: "setFeeManagerCut",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "setMinimumDeposit",
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: "transferOwnership",
        data: BytesLike
    ): Result;

    getEvent(nameOrSignatureOrTopic: "BaseFeeUpdated"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "FeeManagerCutUpdated"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "FulfillRequest"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "FunctionCallCompleted"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "FunctionCalled"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "FunctionRegistered"): EventFragment;

    getEvent(
        nameOrSignatureOrTopic: "MinimumSubscriptionDepositUpdated"
    ): EventFragment;

    getEvent(nameOrSignatureOrTopic: "OCRResponse"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;

    getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface BaseFeeUpdatedEventObject {
    newBaseFee: BigNumber;
}

export type BaseFeeUpdatedEvent = TypedEvent<
    [BigNumber],
    BaseFeeUpdatedEventObject
>;

export type BaseFeeUpdatedEventFilter = TypedEventFilter<BaseFeeUpdatedEvent>;

export interface FeeManagerCutUpdatedEventObject {
    newFeeManagerCut: BigNumber;
}

export type FeeManagerCutUpdatedEvent = TypedEvent<
    [BigNumber],
    FeeManagerCutUpdatedEventObject
>;

export type FeeManagerCutUpdatedEventFilter =
    TypedEventFilter<FeeManagerCutUpdatedEvent>;

export interface FulfillRequestEventObject {
    requestId: string;
    response: string;
    err: string;
}

export type FulfillRequestEvent = TypedEvent<
    [string, string, string],
    FulfillRequestEventObject
>;

export type FulfillRequestEventFilter = TypedEventFilter<FulfillRequestEvent>;

export interface FunctionCallCompletedEventObject {
    functionId: string;
    requestId: string;
    caller: string;
    owner: string;
    callbackFunction: string;
    usedGas: BigNumber;
    response: string;
    err: string;
}

export type FunctionCallCompletedEvent = TypedEvent<
    [string, string, string, string, string, BigNumber, string, string],
    FunctionCallCompletedEventObject
>;

export type FunctionCallCompletedEventFilter =
    TypedEventFilter<FunctionCallCompletedEvent>;

export interface FunctionCalledEventObject {
    functionId: string;
    requestId: string;
    caller: string;
    owner: string;
    callbackFunction: string;
    gasDeposit: BigNumber;
    baseFee: BigNumber;
    fee: BigNumber;
}

export type FunctionCalledEvent = TypedEvent<
    [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
    FunctionCalledEventObject
>;

export type FunctionCalledEventFilter = TypedEventFilter<FunctionCalledEvent>;

export interface FunctionRegisteredEventObject {
    functionId: string;
    owner: string;
    category: string;
    metadata: FunctionsManager.FunctionMetadataStructOutput;
}

export type FunctionRegisteredEvent = TypedEvent<
    [string, string, string, FunctionsManager.FunctionMetadataStructOutput],
    FunctionRegisteredEventObject
>;

export type FunctionRegisteredEventFilter =
    TypedEventFilter<FunctionRegisteredEvent>;

export interface MinimumSubscriptionDepositUpdatedEventObject {
    newMinimumDeposit: BigNumber;
}

export type MinimumSubscriptionDepositUpdatedEvent = TypedEvent<
    [BigNumber],
    MinimumSubscriptionDepositUpdatedEventObject
>;

export type MinimumSubscriptionDepositUpdatedEventFilter =
    TypedEventFilter<MinimumSubscriptionDepositUpdatedEvent>;

export interface OCRResponseEventObject {
    requestId: string;
    result: string;
    err: string;
}

export type OCRResponseEvent = TypedEvent<
    [string, string, string],
    OCRResponseEventObject
>;

export type OCRResponseEventFilter = TypedEventFilter<OCRResponseEvent>;

export interface OwnershipTransferRequestedEventObject {
    from: string;
    to: string;
}

export type OwnershipTransferRequestedEvent = TypedEvent<
    [string, string],
    OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
    TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
    from: string;
    to: string;
}

export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFulfilledEventObject {
    id: string;
}

export type RequestFulfilledEvent = TypedEvent<
    [string],
    RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
    TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
    id: string;
}

export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface FunctionsManager extends BaseContract {
    interface: FunctionsManagerInterface;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        acceptOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        authorMetadata(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [string, string, string] & {
            name: string;
            imageUrl: string;
            websiteUrl: string;
        }
        >;

        baseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

        categoryNames(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        dummyFullfill(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        estimateCost(
            req: Functions.RequestStruct,
            subscriptionId: PromiseOrValue<BigNumberish>,
            gasLimit: PromiseOrValue<BigNumberish>,
            gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        executeRequest(
            functionId: PromiseOrValue<BytesLike>,
            gasLimit: PromiseOrValue<BigNumberish>,
            dummy: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        feeManagerCut(overrides?: CallOverrides): Promise<[number]>;

        forceUnlockFees(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        functionManagerProfitPool(overrides?: CallOverrides): Promise<[BigNumber]>;

        functionMetadatas(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [
                BigNumber,
                string,
                BigNumber,
                string,
                string,
                string,
                Functions.RequestStructOutput,
                string,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
            fee: BigNumber;
            owner: string;
            subId: BigNumber;
            name: string;
            desc: string;
            imageUrl: string;
            request: Functions.RequestStructOutput;
            category: string;
            subscriptionPool: BigNumber;
            unlockedProfitPool: BigNumber;
            lockedProfitPool: BigNumber;
        }
        >;

        functionResponses(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [string, string, string, BigNumber, string, string] & {
            functionId: string;
            caller: string;
            callbackFunction: string;
            gasDeposit: BigNumber;
            response: string;
            err: string;
        }
        >;

        getDONPublicKey(overrides?: CallOverrides): Promise<[string]>;

        getFunction(
            _functionId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[FunctionsManager.FunctionMetadataStructOutput]>;

        getFunctionResponse(
            _requestId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[FunctionsManager.FunctionResponseStructOutput]>;

        handleOracleFulfillment(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        minimumSubscriptionDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

        moveSubscriptionToUnlock(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        registerFunction(
            request: FunctionsManager.FunctionsRegisterRequestStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setBaseFee(
            _baseFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setFeeManagerCut(
            _feeManagerCut: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setMinimumDeposit(
            _minimumDeposit: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        transferOwnership(
            to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };
    callStatic: {
        acceptOwnership(overrides?: CallOverrides): Promise<void>;

        authorMetadata(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [string, string, string] & {
            name: string;
            imageUrl: string;
            websiteUrl: string;
        }
        >;

        baseFee(overrides?: CallOverrides): Promise<BigNumber>;

        categoryNames(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        dummyFullfill(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        estimateCost(
            req: Functions.RequestStruct,
            subscriptionId: PromiseOrValue<BigNumberish>,
            gasLimit: PromiseOrValue<BigNumberish>,
            gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        executeRequest(
            functionId: PromiseOrValue<BytesLike>,
            gasLimit: PromiseOrValue<BigNumberish>,
            dummy: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<string>;

        feeManagerCut(overrides?: CallOverrides): Promise<number>;

        forceUnlockFees(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        functionManagerProfitPool(overrides?: CallOverrides): Promise<BigNumber>;

        functionMetadatas(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [
                BigNumber,
                string,
                BigNumber,
                string,
                string,
                string,
                Functions.RequestStructOutput,
                string,
                BigNumber,
                BigNumber,
                BigNumber
            ] & {
            fee: BigNumber;
            owner: string;
            subId: BigNumber;
            name: string;
            desc: string;
            imageUrl: string;
            request: Functions.RequestStructOutput;
            category: string;
            subscriptionPool: BigNumber;
            unlockedProfitPool: BigNumber;
            lockedProfitPool: BigNumber;
        }
        >;

        functionResponses(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [string, string, string, BigNumber, string, string] & {
            functionId: string;
            caller: string;
            callbackFunction: string;
            gasDeposit: BigNumber;
            response: string;
            err: string;
        }
        >;

        getDONPublicKey(overrides?: CallOverrides): Promise<string>;

        getFunction(
            _functionId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<FunctionsManager.FunctionMetadataStructOutput>;

        getFunctionResponse(
            _requestId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<FunctionsManager.FunctionResponseStructOutput>;

        handleOracleFulfillment(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        minimumSubscriptionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

        moveSubscriptionToUnlock(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        registerFunction(
            request: FunctionsManager.FunctionsRegisterRequestStruct,
            overrides?: CallOverrides
        ): Promise<string>;

        setBaseFee(
            _baseFee: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        setFeeManagerCut(
            _feeManagerCut: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        setMinimumDeposit(
            _minimumDeposit: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        transferOwnership(
            to: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;
    };
    filters: {
        "BaseFeeUpdated(uint256)"(newBaseFee?: null): BaseFeeUpdatedEventFilter;
        BaseFeeUpdated(newBaseFee?: null): BaseFeeUpdatedEventFilter;

        "FeeManagerCutUpdated(uint256)"(
            newFeeManagerCut?: null
        ): FeeManagerCutUpdatedEventFilter;
        FeeManagerCutUpdated(
            newFeeManagerCut?: null
        ): FeeManagerCutUpdatedEventFilter;

        "FulfillRequest(bytes32,bytes,bytes)"(
            requestId?: null,
            response?: null,
            err?: null
        ): FulfillRequestEventFilter;
        FulfillRequest(
            requestId?: null,
            response?: null,
            err?: null
        ): FulfillRequestEventFilter;

        "FunctionCallCompleted(bytes32,bytes32,address,address,bytes32,uint256,bytes,bytes)"(
            functionId?: PromiseOrValue<BytesLike> | null,
            requestId?: PromiseOrValue<BytesLike> | null,
            caller?: PromiseOrValue<string> | null,
            owner?: null,
            callbackFunction?: null,
            usedGas?: null,
            response?: null,
            err?: null
        ): FunctionCallCompletedEventFilter;
        FunctionCallCompleted(
            functionId?: PromiseOrValue<BytesLike> | null,
            requestId?: PromiseOrValue<BytesLike> | null,
            caller?: PromiseOrValue<string> | null,
            owner?: null,
            callbackFunction?: null,
            usedGas?: null,
            response?: null,
            err?: null
        ): FunctionCallCompletedEventFilter;

        "FunctionCalled(bytes32,bytes32,address,address,bytes32,uint256,uint256,uint256)"(
            functionId?: PromiseOrValue<BytesLike> | null,
            requestId?: PromiseOrValue<BytesLike> | null,
            caller?: PromiseOrValue<string> | null,
            owner?: null,
            callbackFunction?: null,
            gasDeposit?: null,
            baseFee?: null,
            fee?: null
        ): FunctionCalledEventFilter;
        FunctionCalled(
            functionId?: PromiseOrValue<BytesLike> | null,
            requestId?: PromiseOrValue<BytesLike> | null,
            caller?: PromiseOrValue<string> | null,
            owner?: null,
            callbackFunction?: null,
            gasDeposit?: null,
            baseFee?: null,
            fee?: null
        ): FunctionCalledEventFilter;

        "FunctionRegistered(bytes32,address,bytes32,tuple)"(
            functionId?: PromiseOrValue<BytesLike> | null,
            owner?: PromiseOrValue<string> | null,
            category?: PromiseOrValue<BytesLike> | null,
            metadata?: null
        ): FunctionRegisteredEventFilter;
        FunctionRegistered(
            functionId?: PromiseOrValue<BytesLike> | null,
            owner?: PromiseOrValue<string> | null,
            category?: PromiseOrValue<BytesLike> | null,
            metadata?: null
        ): FunctionRegisteredEventFilter;

        "MinimumSubscriptionDepositUpdated(uint256)"(
            newMinimumDeposit?: null
        ): MinimumSubscriptionDepositUpdatedEventFilter;
        MinimumSubscriptionDepositUpdated(
            newMinimumDeposit?: null
        ): MinimumSubscriptionDepositUpdatedEventFilter;

        "OCRResponse(bytes32,bytes,bytes)"(
            requestId?: PromiseOrValue<BytesLike> | null,
            result?: null,
            err?: null
        ): OCRResponseEventFilter;
        OCRResponse(
            requestId?: PromiseOrValue<BytesLike> | null,
            result?: null,
            err?: null
        ): OCRResponseEventFilter;

        "OwnershipTransferRequested(address,address)"(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null
        ): OwnershipTransferRequestedEventFilter;
        OwnershipTransferRequested(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null
        ): OwnershipTransferRequestedEventFilter;

        "OwnershipTransferred(address,address)"(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;

        "RequestFulfilled(bytes32)"(
            id?: PromiseOrValue<BytesLike> | null
        ): RequestFulfilledEventFilter;
        RequestFulfilled(
            id?: PromiseOrValue<BytesLike> | null
        ): RequestFulfilledEventFilter;

        "RequestSent(bytes32)"(
            id?: PromiseOrValue<BytesLike> | null
        ): RequestSentEventFilter;
        RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;
    };
    estimateGas: {
        acceptOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        authorMetadata(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        baseFee(overrides?: CallOverrides): Promise<BigNumber>;

        categoryNames(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        dummyFullfill(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        estimateCost(
            req: Functions.RequestStruct,
            subscriptionId: PromiseOrValue<BigNumberish>,
            gasLimit: PromiseOrValue<BigNumberish>,
            gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        executeRequest(
            functionId: PromiseOrValue<BytesLike>,
            gasLimit: PromiseOrValue<BigNumberish>,
            dummy: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        feeManagerCut(overrides?: CallOverrides): Promise<BigNumber>;

        forceUnlockFees(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        functionManagerProfitPool(overrides?: CallOverrides): Promise<BigNumber>;

        functionMetadatas(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        functionResponses(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getDONPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

        getFunction(
            _functionId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getFunctionResponse(
            _requestId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        handleOracleFulfillment(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        minimumSubscriptionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

        moveSubscriptionToUnlock(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        registerFunction(
            request: FunctionsManager.FunctionsRegisterRequestStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setBaseFee(
            _baseFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setFeeManagerCut(
            _feeManagerCut: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setMinimumDeposit(
            _minimumDeposit: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        transferOwnership(
            to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };
    populateTransaction: {
        acceptOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        authorMetadata(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        baseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        categoryNames(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        dummyFullfill(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        estimateCost(
            req: Functions.RequestStruct,
            subscriptionId: PromiseOrValue<BigNumberish>,
            gasLimit: PromiseOrValue<BigNumberish>,
            gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        executeRequest(
            functionId: PromiseOrValue<BytesLike>,
            gasLimit: PromiseOrValue<BigNumberish>,
            dummy: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        feeManagerCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        forceUnlockFees(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        functionManagerProfitPool(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        functionMetadatas(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        functionResponses(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getDONPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getFunction(
            _functionId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getFunctionResponse(
            _requestId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        handleOracleFulfillment(
            requestId: PromiseOrValue<BytesLike>,
            response: PromiseOrValue<BytesLike>,
            err: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        minimumSubscriptionDeposit(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        moveSubscriptionToUnlock(
            functionId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        registerFunction(
            request: FunctionsManager.FunctionsRegisterRequestStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setBaseFee(
            _baseFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setFeeManagerCut(
            _feeManagerCut: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setMinimumDeposit(
            _minimumDeposit: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };

    connect(signerOrProvider: Signer | Provider | string): this;

    attach(addressOrName: string): this;

    deployed(): Promise<this>;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;

    listeners(eventName?: string): Array<Listener>;

    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;

    removeAllListeners(eventName?: string): this;

    acceptOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorMetadata(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<
        [string, string, string] & {
        name: string;
        imageUrl: string;
        websiteUrl: string;
    }
    >;

    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    categoryNames(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    dummyFullfill(
        requestId: PromiseOrValue<BytesLike>,
        response: PromiseOrValue<BytesLike>,
        err: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCost(
        req: Functions.RequestStruct,
        subscriptionId: PromiseOrValue<BigNumberish>,
        gasLimit: PromiseOrValue<BigNumberish>,
        gasPrice: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRequest(
        functionId: PromiseOrValue<BytesLike>,
        gasLimit: PromiseOrValue<BigNumberish>,
        dummy: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeManagerCut(overrides?: CallOverrides): Promise<number>;

    forceUnlockFees(
        functionId: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionManagerProfitPool(overrides?: CallOverrides): Promise<BigNumber>;

    functionMetadatas(
        arg0: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<
        [
            BigNumber,
            string,
            BigNumber,
            string,
            string,
            string,
            Functions.RequestStructOutput,
            string,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
        fee: BigNumber;
        owner: string;
        subId: BigNumber;
        name: string;
        desc: string;
        imageUrl: string;
        request: Functions.RequestStructOutput;
        category: string;
        subscriptionPool: BigNumber;
        unlockedProfitPool: BigNumber;
        lockedProfitPool: BigNumber;
    }
    >;

    functionResponses(
        arg0: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<
        [string, string, string, BigNumber, string, string] & {
        functionId: string;
        caller: string;
        callbackFunction: string;
        gasDeposit: BigNumber;
        response: string;
        err: string;
    }
    >;

    getDONPublicKey(overrides?: CallOverrides): Promise<string>;

    getFunction(
        _functionId: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<FunctionsManager.FunctionMetadataStructOutput>;

    getFunctionResponse(
        _requestId: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<FunctionsManager.FunctionResponseStructOutput>;

    handleOracleFulfillment(
        requestId: PromiseOrValue<BytesLike>,
        response: PromiseOrValue<BytesLike>,
        err: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minimumSubscriptionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    moveSubscriptionToUnlock(
        functionId: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerFunction(
        request: FunctionsManager.FunctionsRegisterRequestStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseFee(
        _baseFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeManagerCut(
        _feeManagerCut: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumDeposit(
        _minimumDeposit: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
        to: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
}
