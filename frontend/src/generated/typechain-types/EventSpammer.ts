/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Functions {
  export type RequestStruct = {
    codeLocation: PromiseOrValue<BigNumberish>;
    secretsLocation: PromiseOrValue<BigNumberish>;
    language: PromiseOrValue<BigNumberish>;
    source: PromiseOrValue<string>;
    secrets: PromiseOrValue<BytesLike>;
    args: PromiseOrValue<string>[];
  };

  export type RequestStructOutput = [
    number,
    number,
    number,
    string,
    string,
    string[]
  ] & {
    codeLocation: number;
    secretsLocation: number;
    language: number;
    source: string;
    secrets: string;
    args: string[];
  };
}

export declare namespace EventSpammer {
  export type FunctionMetadataStruct = {
    fee: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    category: PromiseOrValue<BytesLike>;
    subId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    desc: PromiseOrValue<string>;
    imageUrl: PromiseOrValue<string>;
    expectedArgs: PromiseOrValue<string>[];
    request: Functions.RequestStruct;
    subscriptionPool: PromiseOrValue<BigNumberish>;
    unlockedProfitPool: PromiseOrValue<BigNumberish>;
    lockedProfitPool: PromiseOrValue<BigNumberish>;
  };

  export type FunctionMetadataStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string[],
    Functions.RequestStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fee: BigNumber;
    owner: string;
    category: string;
    subId: BigNumber;
    name: string;
    desc: string;
    imageUrl: string;
    expectedArgs: string[];
    request: Functions.RequestStructOutput;
    subscriptionPool: BigNumber;
    unlockedProfitPool: BigNumber;
    lockedProfitPool: BigNumber;
  };
}

export interface EventSpammerInterface extends utils.Interface {
  functions: {
    "addAuthorizedCaller(address)": FunctionFragment;
    "authorizedCallers(address)": FunctionFragment;
    "emitCallFunction(bytes32,bytes32,address,address,bytes32,uint256,uint256)": FunctionFragment;
    "emitCallbackWithData(bytes32,address,address,bytes32,bytes32,uint256,bytes,bytes)": FunctionFragment;
    "emitRegisterFunction(bytes32,address,string,string,string,string[],bytes32,uint64,uint256,uint8,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAuthorizedCaller"
      | "authorizedCallers"
      | "emitCallFunction"
      | "emitCallbackWithData"
      | "emitRegisterFunction"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedCaller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCallers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCallFunction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCallbackWithData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRegisterFunction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCallFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCallbackWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitRegisterFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FunctionCallCompleted(bytes32,bytes32,address,address,bytes32,uint256,bytes,bytes)": EventFragment;
    "FunctionCalled(bytes32,bytes32,address,address,bytes32,uint256,uint256,uint256)": EventFragment;
    "FunctionRegistered(bytes32,address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FunctionCallCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FunctionCallCompletedEventObject {
  functionId: string;
  requestId: string;
  caller: string;
  owner: string;
  callbackFunction: string;
  usedGas: BigNumber;
  response: string;
  err: string;
}
export type FunctionCallCompletedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, string, string],
  FunctionCallCompletedEventObject
>;

export type FunctionCallCompletedEventFilter =
  TypedEventFilter<FunctionCallCompletedEvent>;

export interface FunctionCalledEventObject {
  functionId: string;
  requestId: string;
  caller: string;
  owner: string;
  callbackFunction: string;
  gasDeposit: BigNumber;
  baseFee: BigNumber;
  fee: BigNumber;
}
export type FunctionCalledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
  FunctionCalledEventObject
>;

export type FunctionCalledEventFilter = TypedEventFilter<FunctionCalledEvent>;

export interface FunctionRegisteredEventObject {
  functionId: string;
  owner: string;
  metadata: EventSpammer.FunctionMetadataStructOutput;
}
export type FunctionRegisteredEvent = TypedEvent<
  [string, string, EventSpammer.FunctionMetadataStructOutput],
  FunctionRegisteredEventObject
>;

export type FunctionRegisteredEventFilter =
  TypedEventFilter<FunctionRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface EventSpammer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventSpammerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAuthorizedCaller(
      _caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emitCallFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BytesLike>,
      _caller: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _gasDeposit: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitCallbackWithData(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _usedGas: PromiseOrValue<BigNumberish>,
      _response: PromiseOrValue<BytesLike>,
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitRegisterFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _expectedArgs: PromiseOrValue<string>[],
      _category: PromiseOrValue<BytesLike>,
      _subId: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _codeLocation: PromiseOrValue<BigNumberish>,
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAuthorizedCaller(
    _caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedCallers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  emitCallFunction(
    _functionId: PromiseOrValue<BytesLike>,
    _requestId: PromiseOrValue<BytesLike>,
    _caller: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _callbackFunction: PromiseOrValue<BytesLike>,
    _gasDeposit: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitCallbackWithData(
    _functionId: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    _caller: PromiseOrValue<string>,
    _requestId: PromiseOrValue<BytesLike>,
    _callbackFunction: PromiseOrValue<BytesLike>,
    _usedGas: PromiseOrValue<BigNumberish>,
    _response: PromiseOrValue<BytesLike>,
    _err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitRegisterFunction(
    _functionId: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _desc: PromiseOrValue<string>,
    _imageUrl: PromiseOrValue<string>,
    _expectedArgs: PromiseOrValue<string>[],
    _category: PromiseOrValue<BytesLike>,
    _subId: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _codeLocation: PromiseOrValue<BigNumberish>,
    _source: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuthorizedCaller(
      _caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emitCallFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BytesLike>,
      _caller: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _gasDeposit: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitCallbackWithData(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _usedGas: PromiseOrValue<BigNumberish>,
      _response: PromiseOrValue<BytesLike>,
      _err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitRegisterFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _expectedArgs: PromiseOrValue<string>[],
      _category: PromiseOrValue<BytesLike>,
      _subId: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _codeLocation: PromiseOrValue<BigNumberish>,
      _source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FunctionCallCompleted(bytes32,bytes32,address,address,bytes32,uint256,bytes,bytes)"(
      functionId?: PromiseOrValue<BytesLike> | null,
      requestId?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      owner?: null,
      callbackFunction?: null,
      usedGas?: null,
      response?: null,
      err?: null
    ): FunctionCallCompletedEventFilter;
    FunctionCallCompleted(
      functionId?: PromiseOrValue<BytesLike> | null,
      requestId?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      owner?: null,
      callbackFunction?: null,
      usedGas?: null,
      response?: null,
      err?: null
    ): FunctionCallCompletedEventFilter;

    "FunctionCalled(bytes32,bytes32,address,address,bytes32,uint256,uint256,uint256)"(
      functionId?: PromiseOrValue<BytesLike> | null,
      requestId?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      owner?: null,
      callbackFunction?: null,
      gasDeposit?: null,
      baseFee?: null,
      fee?: null
    ): FunctionCalledEventFilter;
    FunctionCalled(
      functionId?: PromiseOrValue<BytesLike> | null,
      requestId?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      owner?: null,
      callbackFunction?: null,
      gasDeposit?: null,
      baseFee?: null,
      fee?: null
    ): FunctionCalledEventFilter;

    "FunctionRegistered(bytes32,address,tuple)"(
      functionId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      metadata?: null
    ): FunctionRegisteredEventFilter;
    FunctionRegistered(
      functionId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      metadata?: null
    ): FunctionRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addAuthorizedCaller(
      _caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitCallFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BytesLike>,
      _caller: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _gasDeposit: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitCallbackWithData(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _usedGas: PromiseOrValue<BigNumberish>,
      _response: PromiseOrValue<BytesLike>,
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitRegisterFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _expectedArgs: PromiseOrValue<string>[],
      _category: PromiseOrValue<BytesLike>,
      _subId: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _codeLocation: PromiseOrValue<BigNumberish>,
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedCaller(
      _caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedCallers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitCallFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _requestId: PromiseOrValue<BytesLike>,
      _caller: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _gasDeposit: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitCallbackWithData(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _callbackFunction: PromiseOrValue<BytesLike>,
      _usedGas: PromiseOrValue<BigNumberish>,
      _response: PromiseOrValue<BytesLike>,
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitRegisterFunction(
      _functionId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _desc: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _expectedArgs: PromiseOrValue<string>[],
      _category: PromiseOrValue<BytesLike>,
      _subId: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _codeLocation: PromiseOrValue<BigNumberish>,
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
