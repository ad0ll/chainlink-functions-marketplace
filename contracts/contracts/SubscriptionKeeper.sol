pragma solidity ^0.8.7;

// AutomationCompatible.sol imports the functions from both ./AutomationBase.sol and
// ./interfaces/AutomationCompatibleInterface.sol
import "@chainlink/contracts/src/v0.8/AutomationCompatible.sol";
// Can't use the below because it doesn't have getSubscription
// import {FunctionsBillingRegistryInterface} from "./functions/interfaces/FunctionsBillingRegistryInterface.sol";
import {FunctionsBillingRegistry} from "./functions/FunctionsBillingRegistry.sol";
import {FunctionsManager} from "./FunctionsManager.sol";
/**
 * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.
 * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.
 * DO NOT USE THIS CODE IN PRODUCTION.
 */

//TODO Need to figure out how to keep each upkeep id funded
contract FunctionsManagerMonitor is AutomationCompatibleInterface {
    /**
     * Public counter variable
     */

    /**
     * Use an interval in seconds and a timestamp to slow execution of Upkeep
     */
    FunctionsManager public functionsManager;
    FunctionsBillingRegistry public functionsBillingRegistry;
    uint256 public threshold = 10 ** 18 * 3; // Refill immediately when falls under N (3 by default) LINK

    constructor(address _functionsManager, address _functionsBillingRegistry) {
        functionsManager = FunctionsManager(_functionsManager);
        functionsBillingRegistry = FunctionsBillingRegistry(_functionsBillingRegistry);
    }

    function checkUpkeep(
        bytes calldata checkData 
    )
        external
        view
        override
        returns (bool upkeepNeeded, bytes memory /* performData */)
    {
        //(balance, owner, consumers)
        uint64 subscriptionId = abi.decode(checkData, (uint64)); 
        (uint96 balance,) = functionsBillingRegistry.getSubscription(subscriptionId);
        upkeepNeeded = balance <= threshold;
        return (upkeepNeeded, abi.encode(subscriptionId, balance));
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata performData) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        (uint64 subscriptionId, uint96 balance) = abi.decode(performData, (uint64, uint96));
    
        if (balance <= threshold ) {
            functionsManager.refillSubscription(subscriptionId, balance);
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }
}
